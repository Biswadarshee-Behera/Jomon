// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	echo "github.com/labstack/echo/v4"
	service "github.com/traPtitech/Jomon/service"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockService) CreateFile(src io.Reader, name, mimetype string, requestID uuid.UUID) (*service.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", src, name, mimetype, requestID)
	ret0, _ := ret[0].(*service.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockServiceMockRecorder) CreateFile(src, name, mimetype, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockService)(nil).CreateFile), src, name, mimetype, requestID)
}

// GetAccessToken mocks base method.
func (m *MockService) GetAccessToken(code, codeVerifier string) (service.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", code, codeVerifier)
	ret0, _ := ret[0].(service.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockServiceMockRecorder) GetAccessToken(code, codeVerifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockService)(nil).GetAccessToken), code, codeVerifier)
}

// GetClientId mocks base method.
func (m *MockService) GetClientId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClientId indicates an expected call of GetClientId.
func (mr *MockServiceMockRecorder) GetClientId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientId", reflect.TypeOf((*MockService)(nil).GetClientId))
}

// GetMe mocks base method.
func (m *MockService) GetMe(token string) (*service.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe", token)
	ret0, _ := ret[0].(*service.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockServiceMockRecorder) GetMe(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockService)(nil).GetMe), token)
}

// StrToDate mocks base method.
func (m *MockService) StrToDate(str string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrToDate", str)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StrToDate indicates an expected call of StrToDate.
func (mr *MockServiceMockRecorder) StrToDate(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrToDate", reflect.TypeOf((*MockService)(nil).StrToDate), str)
}

// StrToTime mocks base method.
func (m *MockService) StrToTime(str string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrToTime", str)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StrToTime indicates an expected call of StrToTime.
func (mr *MockServiceMockRecorder) StrToTime(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrToTime", reflect.TypeOf((*MockService)(nil).StrToTime), str)
}

// WebhookEventHandler mocks base method.
func (m *MockService) WebhookEventHandler(c echo.Context, reqBody, resBody []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WebhookEventHandler", c, reqBody, resBody)
}

// WebhookEventHandler indicates an expected call of WebhookEventHandler.
func (mr *MockServiceMockRecorder) WebhookEventHandler(c, reqBody, resBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookEventHandler", reflect.TypeOf((*MockService)(nil).WebhookEventHandler), c, reqBody, resBody)
}
