// Code generated by entc, DO NOT EDIT.

package request

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the request type in the database.
	Label = "request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeStatus holds the string denoting the status edge name in mutations.
	EdgeStatus = "status"
	// EdgeTarget holds the string denoting the target edge name in mutations.
	EdgeTarget = "target"
	// EdgeFile holds the string denoting the file edge name in mutations.
	EdgeFile = "file"
	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"
	// EdgeTransactionDetail holds the string denoting the transaction_detail edge name in mutations.
	EdgeTransactionDetail = "transaction_detail"
	// EdgeComment holds the string denoting the comment edge name in mutations.
	EdgeComment = "comment"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the request in the database.
	Table = "requests"
	// StatusTable is the table the holds the status relation/edge.
	StatusTable = "request_status"
	// StatusInverseTable is the table name for the RequestStatus entity.
	// It exists in this package in order to avoid circular dependency with the "requeststatus" package.
	StatusInverseTable = "request_status"
	// StatusColumn is the table column denoting the status relation/edge.
	StatusColumn = "request_status"
	// TargetTable is the table the holds the target relation/edge.
	TargetTable = "request_targets"
	// TargetInverseTable is the table name for the RequestTarget entity.
	// It exists in this package in order to avoid circular dependency with the "requesttarget" package.
	TargetInverseTable = "request_targets"
	// TargetColumn is the table column denoting the target relation/edge.
	TargetColumn = "request_target"
	// FileTable is the table the holds the file relation/edge.
	FileTable = "files"
	// FileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FileInverseTable = "files"
	// FileColumn is the table column denoting the file relation/edge.
	FileColumn = "request_file"
	// TagTable is the table the holds the tag relation/edge.
	TagTable = "tags"
	// TagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagInverseTable = "tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "request_tag"
	// TransactionDetailTable is the table the holds the transaction_detail relation/edge.
	TransactionDetailTable = "transaction_details"
	// TransactionDetailInverseTable is the table name for the TransactionDetail entity.
	// It exists in this package in order to avoid circular dependency with the "transactiondetail" package.
	TransactionDetailInverseTable = "transaction_details"
	// TransactionDetailColumn is the table column denoting the transaction_detail relation/edge.
	TransactionDetailColumn = "request_transaction_detail"
	// CommentTable is the table the holds the comment relation/edge.
	CommentTable = "comments"
	// CommentInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentInverseTable = "comments"
	// CommentColumn is the table column denoting the comment relation/edge.
	CommentColumn = "request_comment"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "users"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "request_user"
)

// Columns holds all SQL columns for request fields.
var Columns = []string{
	FieldID,
	FieldAmount,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
