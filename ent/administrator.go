// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/traPtitech/Jomon/ent/administrator"
)

// Administrator is the model entity for the Administrator schema.
type Administrator struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TrapID holds the value of the "trap_id" field.
	TrapID string `json:"trap_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Administrator) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case administrator.FieldID:
			values[i] = new(sql.NullInt64)
		case administrator.FieldTrapID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Administrator", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Administrator fields.
func (a *Administrator) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case administrator.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case administrator.FieldTrapID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trap_id", values[i])
			} else if value.Valid {
				a.TrapID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Administrator.
// Note that you need to call Administrator.Unwrap() before calling this method if this Administrator
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Administrator) Update() *AdministratorUpdateOne {
	return (&AdministratorClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Administrator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Administrator) Unwrap() *Administrator {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Administrator is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Administrator) String() string {
	var builder strings.Builder
	builder.WriteString("Administrator(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", trap_id=")
	builder.WriteString(a.TrapID)
	builder.WriteByte(')')
	return builder.String()
}

// Administrators is a parsable slice of Administrator.
type Administrators []*Administrator

func (a Administrators) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
