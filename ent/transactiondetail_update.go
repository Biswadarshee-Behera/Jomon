// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/traPtitech/Jomon/ent/group"
	"github.com/traPtitech/Jomon/ent/predicate"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/transaction"
	"github.com/traPtitech/Jomon/ent/transactiondetail"
)

// TransactionDetailUpdate is the builder for updating TransactionDetail entities.
type TransactionDetailUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionDetailMutation
}

// Where adds a new predicate for the TransactionDetailUpdate builder.
func (tdu *TransactionDetailUpdate) Where(ps ...predicate.TransactionDetail) *TransactionDetailUpdate {
	tdu.mutation.predicates = append(tdu.mutation.predicates, ps...)
	return tdu
}

// SetAmount sets the "amount" field.
func (tdu *TransactionDetailUpdate) SetAmount(i int) *TransactionDetailUpdate {
	tdu.mutation.ResetAmount()
	tdu.mutation.SetAmount(i)
	return tdu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tdu *TransactionDetailUpdate) SetNillableAmount(i *int) *TransactionDetailUpdate {
	if i != nil {
		tdu.SetAmount(*i)
	}
	return tdu
}

// AddAmount adds i to the "amount" field.
func (tdu *TransactionDetailUpdate) AddAmount(i int) *TransactionDetailUpdate {
	tdu.mutation.AddAmount(i)
	return tdu
}

// SetTarget sets the "target" field.
func (tdu *TransactionDetailUpdate) SetTarget(s string) *TransactionDetailUpdate {
	tdu.mutation.SetTarget(s)
	return tdu
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (tdu *TransactionDetailUpdate) SetNillableTarget(s *string) *TransactionDetailUpdate {
	if s != nil {
		tdu.SetTarget(*s)
	}
	return tdu
}

// SetCreatedAt sets the "created_at" field.
func (tdu *TransactionDetailUpdate) SetCreatedAt(t time.Time) *TransactionDetailUpdate {
	tdu.mutation.SetCreatedAt(t)
	return tdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tdu *TransactionDetailUpdate) SetNillableCreatedAt(t *time.Time) *TransactionDetailUpdate {
	if t != nil {
		tdu.SetCreatedAt(*t)
	}
	return tdu
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (tdu *TransactionDetailUpdate) SetTransactionID(id uuid.UUID) *TransactionDetailUpdate {
	tdu.mutation.SetTransactionID(id)
	return tdu
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (tdu *TransactionDetailUpdate) SetTransaction(t *Transaction) *TransactionDetailUpdate {
	return tdu.SetTransactionID(t.ID)
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (tdu *TransactionDetailUpdate) SetRequestID(id uuid.UUID) *TransactionDetailUpdate {
	tdu.mutation.SetRequestID(id)
	return tdu
}

// SetNillableRequestID sets the "request" edge to the Request entity by ID if the given value is not nil.
func (tdu *TransactionDetailUpdate) SetNillableRequestID(id *uuid.UUID) *TransactionDetailUpdate {
	if id != nil {
		tdu = tdu.SetRequestID(*id)
	}
	return tdu
}

// SetRequest sets the "request" edge to the Request entity.
func (tdu *TransactionDetailUpdate) SetRequest(r *Request) *TransactionDetailUpdate {
	return tdu.SetRequestID(r.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (tdu *TransactionDetailUpdate) SetGroupID(id uuid.UUID) *TransactionDetailUpdate {
	tdu.mutation.SetGroupID(id)
	return tdu
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (tdu *TransactionDetailUpdate) SetNillableGroupID(id *uuid.UUID) *TransactionDetailUpdate {
	if id != nil {
		tdu = tdu.SetGroupID(*id)
	}
	return tdu
}

// SetGroup sets the "group" edge to the Group entity.
func (tdu *TransactionDetailUpdate) SetGroup(g *Group) *TransactionDetailUpdate {
	return tdu.SetGroupID(g.ID)
}

// Mutation returns the TransactionDetailMutation object of the builder.
func (tdu *TransactionDetailUpdate) Mutation() *TransactionDetailMutation {
	return tdu.mutation
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (tdu *TransactionDetailUpdate) ClearTransaction() *TransactionDetailUpdate {
	tdu.mutation.ClearTransaction()
	return tdu
}

// ClearRequest clears the "request" edge to the Request entity.
func (tdu *TransactionDetailUpdate) ClearRequest() *TransactionDetailUpdate {
	tdu.mutation.ClearRequest()
	return tdu
}

// ClearGroup clears the "group" edge to the Group entity.
func (tdu *TransactionDetailUpdate) ClearGroup() *TransactionDetailUpdate {
	tdu.mutation.ClearGroup()
	return tdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *TransactionDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tdu.hooks) == 0 {
		if err = tdu.check(); err != nil {
			return 0, err
		}
		affected, err = tdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tdu.check(); err != nil {
				return 0, err
			}
			tdu.mutation = mutation
			affected, err = tdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tdu.hooks) - 1; i >= 0; i-- {
			mut = tdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TransactionDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TransactionDetailUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TransactionDetailUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdu *TransactionDetailUpdate) check() error {
	if _, ok := tdu.mutation.TransactionID(); tdu.mutation.TransactionCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"transaction\"")
	}
	return nil
}

func (tdu *TransactionDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transactiondetail.Table,
			Columns: transactiondetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: transactiondetail.FieldID,
			},
		},
	}
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transactiondetail.FieldAmount,
		})
	}
	if value, ok := tdu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transactiondetail.FieldAmount,
		})
	}
	if value, ok := tdu.mutation.Target(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactiondetail.FieldTarget,
		})
	}
	if value, ok := tdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transactiondetail.FieldCreatedAt,
		})
	}
	if tdu.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transactiondetail.TransactionTable,
			Columns: []string{transactiondetail.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transactiondetail.TransactionTable,
			Columns: []string{transactiondetail.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tdu.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactiondetail.RequestTable,
			Columns: []string{transactiondetail.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: request.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactiondetail.RequestTable,
			Columns: []string{transactiondetail.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: request.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tdu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactiondetail.GroupTable,
			Columns: []string{transactiondetail.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tdu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactiondetail.GroupTable,
			Columns: []string{transactiondetail.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactiondetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TransactionDetailUpdateOne is the builder for updating a single TransactionDetail entity.
type TransactionDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionDetailMutation
}

// SetAmount sets the "amount" field.
func (tduo *TransactionDetailUpdateOne) SetAmount(i int) *TransactionDetailUpdateOne {
	tduo.mutation.ResetAmount()
	tduo.mutation.SetAmount(i)
	return tduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tduo *TransactionDetailUpdateOne) SetNillableAmount(i *int) *TransactionDetailUpdateOne {
	if i != nil {
		tduo.SetAmount(*i)
	}
	return tduo
}

// AddAmount adds i to the "amount" field.
func (tduo *TransactionDetailUpdateOne) AddAmount(i int) *TransactionDetailUpdateOne {
	tduo.mutation.AddAmount(i)
	return tduo
}

// SetTarget sets the "target" field.
func (tduo *TransactionDetailUpdateOne) SetTarget(s string) *TransactionDetailUpdateOne {
	tduo.mutation.SetTarget(s)
	return tduo
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (tduo *TransactionDetailUpdateOne) SetNillableTarget(s *string) *TransactionDetailUpdateOne {
	if s != nil {
		tduo.SetTarget(*s)
	}
	return tduo
}

// SetCreatedAt sets the "created_at" field.
func (tduo *TransactionDetailUpdateOne) SetCreatedAt(t time.Time) *TransactionDetailUpdateOne {
	tduo.mutation.SetCreatedAt(t)
	return tduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tduo *TransactionDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *TransactionDetailUpdateOne {
	if t != nil {
		tduo.SetCreatedAt(*t)
	}
	return tduo
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (tduo *TransactionDetailUpdateOne) SetTransactionID(id uuid.UUID) *TransactionDetailUpdateOne {
	tduo.mutation.SetTransactionID(id)
	return tduo
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (tduo *TransactionDetailUpdateOne) SetTransaction(t *Transaction) *TransactionDetailUpdateOne {
	return tduo.SetTransactionID(t.ID)
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (tduo *TransactionDetailUpdateOne) SetRequestID(id uuid.UUID) *TransactionDetailUpdateOne {
	tduo.mutation.SetRequestID(id)
	return tduo
}

// SetNillableRequestID sets the "request" edge to the Request entity by ID if the given value is not nil.
func (tduo *TransactionDetailUpdateOne) SetNillableRequestID(id *uuid.UUID) *TransactionDetailUpdateOne {
	if id != nil {
		tduo = tduo.SetRequestID(*id)
	}
	return tduo
}

// SetRequest sets the "request" edge to the Request entity.
func (tduo *TransactionDetailUpdateOne) SetRequest(r *Request) *TransactionDetailUpdateOne {
	return tduo.SetRequestID(r.ID)
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (tduo *TransactionDetailUpdateOne) SetGroupID(id uuid.UUID) *TransactionDetailUpdateOne {
	tduo.mutation.SetGroupID(id)
	return tduo
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (tduo *TransactionDetailUpdateOne) SetNillableGroupID(id *uuid.UUID) *TransactionDetailUpdateOne {
	if id != nil {
		tduo = tduo.SetGroupID(*id)
	}
	return tduo
}

// SetGroup sets the "group" edge to the Group entity.
func (tduo *TransactionDetailUpdateOne) SetGroup(g *Group) *TransactionDetailUpdateOne {
	return tduo.SetGroupID(g.ID)
}

// Mutation returns the TransactionDetailMutation object of the builder.
func (tduo *TransactionDetailUpdateOne) Mutation() *TransactionDetailMutation {
	return tduo.mutation
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (tduo *TransactionDetailUpdateOne) ClearTransaction() *TransactionDetailUpdateOne {
	tduo.mutation.ClearTransaction()
	return tduo
}

// ClearRequest clears the "request" edge to the Request entity.
func (tduo *TransactionDetailUpdateOne) ClearRequest() *TransactionDetailUpdateOne {
	tduo.mutation.ClearRequest()
	return tduo
}

// ClearGroup clears the "group" edge to the Group entity.
func (tduo *TransactionDetailUpdateOne) ClearGroup() *TransactionDetailUpdateOne {
	tduo.mutation.ClearGroup()
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *TransactionDetailUpdateOne) Select(field string, fields ...string) *TransactionDetailUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated TransactionDetail entity.
func (tduo *TransactionDetailUpdateOne) Save(ctx context.Context) (*TransactionDetail, error) {
	var (
		err  error
		node *TransactionDetail
	)
	if len(tduo.hooks) == 0 {
		if err = tduo.check(); err != nil {
			return nil, err
		}
		node, err = tduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tduo.check(); err != nil {
				return nil, err
			}
			tduo.mutation = mutation
			node, err = tduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tduo.hooks) - 1; i >= 0; i-- {
			mut = tduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TransactionDetailUpdateOne) SaveX(ctx context.Context) *TransactionDetail {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *TransactionDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TransactionDetailUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tduo *TransactionDetailUpdateOne) check() error {
	if _, ok := tduo.mutation.TransactionID(); tduo.mutation.TransactionCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"transaction\"")
	}
	return nil
}

func (tduo *TransactionDetailUpdateOne) sqlSave(ctx context.Context) (_node *TransactionDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transactiondetail.Table,
			Columns: transactiondetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: transactiondetail.FieldID,
			},
		},
	}
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TransactionDetail.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactiondetail.FieldID)
		for _, f := range fields {
			if !transactiondetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transactiondetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transactiondetail.FieldAmount,
		})
	}
	if value, ok := tduo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: transactiondetail.FieldAmount,
		})
	}
	if value, ok := tduo.mutation.Target(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactiondetail.FieldTarget,
		})
	}
	if value, ok := tduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: transactiondetail.FieldCreatedAt,
		})
	}
	if tduo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transactiondetail.TransactionTable,
			Columns: []string{transactiondetail.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transactiondetail.TransactionTable,
			Columns: []string{transactiondetail.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tduo.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactiondetail.RequestTable,
			Columns: []string{transactiondetail.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: request.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactiondetail.RequestTable,
			Columns: []string{transactiondetail.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: request.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tduo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactiondetail.GroupTable,
			Columns: []string{transactiondetail.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tduo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactiondetail.GroupTable,
			Columns: []string{transactiondetail.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TransactionDetail{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactiondetail.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
