// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/traPtitech/Jomon/ent/group"
	"github.com/traPtitech/Jomon/ent/groupuser"
)

// GroupUserCreate is the builder for creating a GroupUser entity.
type GroupUserCreate struct {
	config
	mutation *GroupUserMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (guc *GroupUserCreate) SetUserID(s string) *GroupUserCreate {
	guc.mutation.SetUserID(s)
	return guc
}

// SetCreatedAt sets the "created_at" field.
func (guc *GroupUserCreate) SetCreatedAt(t time.Time) *GroupUserCreate {
	guc.mutation.SetCreatedAt(t)
	return guc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guc *GroupUserCreate) SetNillableCreatedAt(t *time.Time) *GroupUserCreate {
	if t != nil {
		guc.SetCreatedAt(*t)
	}
	return guc
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (guc *GroupUserCreate) SetGroupID(id int) *GroupUserCreate {
	guc.mutation.SetGroupID(id)
	return guc
}

// SetGroup sets the "group" edge to the Group entity.
func (guc *GroupUserCreate) SetGroup(g *Group) *GroupUserCreate {
	return guc.SetGroupID(g.ID)
}

// Mutation returns the GroupUserMutation object of the builder.
func (guc *GroupUserCreate) Mutation() *GroupUserMutation {
	return guc.mutation
}

// Save creates the GroupUser in the database.
func (guc *GroupUserCreate) Save(ctx context.Context) (*GroupUser, error) {
	var (
		err  error
		node *GroupUser
	)
	guc.defaults()
	if len(guc.hooks) == 0 {
		if err = guc.check(); err != nil {
			return nil, err
		}
		node, err = guc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = guc.check(); err != nil {
				return nil, err
			}
			guc.mutation = mutation
			node, err = guc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guc.hooks) - 1; i >= 0; i-- {
			mut = guc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (guc *GroupUserCreate) SaveX(ctx context.Context) *GroupUser {
	v, err := guc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (guc *GroupUserCreate) defaults() {
	if _, ok := guc.mutation.CreatedAt(); !ok {
		v := groupuser.DefaultCreatedAt()
		guc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guc *GroupUserCreate) check() error {
	if _, ok := guc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := guc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := guc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group", err: errors.New("ent: missing required edge \"group\"")}
	}
	return nil
}

func (guc *GroupUserCreate) sqlSave(ctx context.Context) (*GroupUser, error) {
	_node, _spec := guc.createSpec()
	if err := sqlgraph.CreateNode(ctx, guc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (guc *GroupUserCreate) createSpec() (*GroupUser, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupUser{config: guc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: groupuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupuser.FieldID,
			},
		}
	)
	if value, ok := guc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupuser.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := guc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := guc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupuser.GroupTable,
			Columns: []string{groupuser.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupUserCreateBulk is the builder for creating many GroupUser entities in bulk.
type GroupUserCreateBulk struct {
	config
	builders []*GroupUserCreate
}

// Save creates the GroupUser entities in the database.
func (gucb *GroupUserCreateBulk) Save(ctx context.Context) ([]*GroupUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gucb.builders))
	nodes := make([]*GroupUser, len(gucb.builders))
	mutators := make([]Mutator, len(gucb.builders))
	for i := range gucb.builders {
		func(i int, root context.Context) {
			builder := gucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gucb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gucb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gucb *GroupUserCreateBulk) SaveX(ctx context.Context) []*GroupUser {
	v, err := gucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
