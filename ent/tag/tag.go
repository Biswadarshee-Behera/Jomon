// Code generated by entc, DO NOT EDIT.

package tag

import (
	"time"
)

const (
	// Label holds the string label denoting the tag type in the database.
	Label = "tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeRequestTag holds the string denoting the request_tag edge name in mutations.
	EdgeRequestTag = "request_tag"
	// EdgeTransactionTag holds the string denoting the transaction_tag edge name in mutations.
	EdgeTransactionTag = "transaction_tag"
	// Table holds the table name of the tag in the database.
	Table = "tags"
	// RequestTagTable is the table the holds the request_tag relation/edge.
	RequestTagTable = "request_tags"
	// RequestTagInverseTable is the table name for the RequestTag entity.
	// It exists in this package in order to avoid circular dependency with the "requesttag" package.
	RequestTagInverseTable = "request_tags"
	// RequestTagColumn is the table column denoting the request_tag relation/edge.
	RequestTagColumn = "tag_request_tag"
	// TransactionTagTable is the table the holds the transaction_tag relation/edge.
	TransactionTagTable = "transaction_tags"
	// TransactionTagInverseTable is the table name for the TransactionTag entity.
	// It exists in this package in order to avoid circular dependency with the "transactiontag" package.
	TransactionTagInverseTable = "transaction_tags"
	// TransactionTagColumn is the table column denoting the transaction_tag relation/edge.
	TransactionTagColumn = "tag_transaction_tag"
)

// Columns holds all SQL columns for tag fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)
