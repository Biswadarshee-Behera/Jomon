// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/traPtitech/Jomon/ent/predicate"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/requesttag"
	"github.com/traPtitech/Jomon/ent/tag"
)

// RequestTagUpdate is the builder for updating RequestTag entities.
type RequestTagUpdate struct {
	config
	hooks    []Hook
	mutation *RequestTagMutation
}

// Where adds a new predicate for the RequestTagUpdate builder.
func (rtu *RequestTagUpdate) Where(ps ...predicate.RequestTag) *RequestTagUpdate {
	rtu.mutation.predicates = append(rtu.mutation.predicates, ps...)
	return rtu
}

// SetRequestID sets the "request_id" field.
func (rtu *RequestTagUpdate) SetRequestID(i int) *RequestTagUpdate {
	rtu.mutation.ResetRequestID()
	rtu.mutation.SetRequestID(i)
	return rtu
}

// SetCreatedAt sets the "created_at" field.
func (rtu *RequestTagUpdate) SetCreatedAt(t time.Time) *RequestTagUpdate {
	rtu.mutation.SetCreatedAt(t)
	return rtu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rtu *RequestTagUpdate) SetNillableCreatedAt(t *time.Time) *RequestTagUpdate {
	if t != nil {
		rtu.SetCreatedAt(*t)
	}
	return rtu
}

// SetRequest sets the "request" edge to the Request entity.
func (rtu *RequestTagUpdate) SetRequest(r *Request) *RequestTagUpdate {
	return rtu.SetRequestID(r.ID)
}

// SetTagID sets the "tag" edge to the Tag entity by ID.
func (rtu *RequestTagUpdate) SetTagID(id int) *RequestTagUpdate {
	rtu.mutation.SetTagID(id)
	return rtu
}

// SetNillableTagID sets the "tag" edge to the Tag entity by ID if the given value is not nil.
func (rtu *RequestTagUpdate) SetNillableTagID(id *int) *RequestTagUpdate {
	if id != nil {
		rtu = rtu.SetTagID(*id)
	}
	return rtu
}

// SetTag sets the "tag" edge to the Tag entity.
func (rtu *RequestTagUpdate) SetTag(t *Tag) *RequestTagUpdate {
	return rtu.SetTagID(t.ID)
}

// Mutation returns the RequestTagMutation object of the builder.
func (rtu *RequestTagUpdate) Mutation() *RequestTagMutation {
	return rtu.mutation
}

// ClearRequest clears the "request" edge to the Request entity.
func (rtu *RequestTagUpdate) ClearRequest() *RequestTagUpdate {
	rtu.mutation.ClearRequest()
	return rtu
}

// ClearTag clears the "tag" edge to the Tag entity.
func (rtu *RequestTagUpdate) ClearTag() *RequestTagUpdate {
	rtu.mutation.ClearTag()
	return rtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *RequestTagUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rtu.hooks) == 0 {
		if err = rtu.check(); err != nil {
			return 0, err
		}
		affected, err = rtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtu.check(); err != nil {
				return 0, err
			}
			rtu.mutation = mutation
			affected, err = rtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rtu.hooks) - 1; i >= 0; i-- {
			mut = rtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *RequestTagUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *RequestTagUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *RequestTagUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtu *RequestTagUpdate) check() error {
	if _, ok := rtu.mutation.RequestID(); rtu.mutation.RequestCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"request\"")
	}
	return nil
}

func (rtu *RequestTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requesttag.Table,
			Columns: requesttag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requesttag.FieldID,
			},
		},
	}
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: requesttag.FieldCreatedAt,
		})
	}
	if rtu.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   requesttag.RequestTable,
			Columns: []string{requesttag.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: request.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   requesttag.RequestTable,
			Columns: []string{requesttag.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: request.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   requesttag.TagTable,
			Columns: []string{requesttag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   requesttag.TagTable,
			Columns: []string{requesttag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requesttag.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RequestTagUpdateOne is the builder for updating a single RequestTag entity.
type RequestTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestTagMutation
}

// SetRequestID sets the "request_id" field.
func (rtuo *RequestTagUpdateOne) SetRequestID(i int) *RequestTagUpdateOne {
	rtuo.mutation.ResetRequestID()
	rtuo.mutation.SetRequestID(i)
	return rtuo
}

// SetCreatedAt sets the "created_at" field.
func (rtuo *RequestTagUpdateOne) SetCreatedAt(t time.Time) *RequestTagUpdateOne {
	rtuo.mutation.SetCreatedAt(t)
	return rtuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rtuo *RequestTagUpdateOne) SetNillableCreatedAt(t *time.Time) *RequestTagUpdateOne {
	if t != nil {
		rtuo.SetCreatedAt(*t)
	}
	return rtuo
}

// SetRequest sets the "request" edge to the Request entity.
func (rtuo *RequestTagUpdateOne) SetRequest(r *Request) *RequestTagUpdateOne {
	return rtuo.SetRequestID(r.ID)
}

// SetTagID sets the "tag" edge to the Tag entity by ID.
func (rtuo *RequestTagUpdateOne) SetTagID(id int) *RequestTagUpdateOne {
	rtuo.mutation.SetTagID(id)
	return rtuo
}

// SetNillableTagID sets the "tag" edge to the Tag entity by ID if the given value is not nil.
func (rtuo *RequestTagUpdateOne) SetNillableTagID(id *int) *RequestTagUpdateOne {
	if id != nil {
		rtuo = rtuo.SetTagID(*id)
	}
	return rtuo
}

// SetTag sets the "tag" edge to the Tag entity.
func (rtuo *RequestTagUpdateOne) SetTag(t *Tag) *RequestTagUpdateOne {
	return rtuo.SetTagID(t.ID)
}

// Mutation returns the RequestTagMutation object of the builder.
func (rtuo *RequestTagUpdateOne) Mutation() *RequestTagMutation {
	return rtuo.mutation
}

// ClearRequest clears the "request" edge to the Request entity.
func (rtuo *RequestTagUpdateOne) ClearRequest() *RequestTagUpdateOne {
	rtuo.mutation.ClearRequest()
	return rtuo
}

// ClearTag clears the "tag" edge to the Tag entity.
func (rtuo *RequestTagUpdateOne) ClearTag() *RequestTagUpdateOne {
	rtuo.mutation.ClearTag()
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *RequestTagUpdateOne) Select(field string, fields ...string) *RequestTagUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated RequestTag entity.
func (rtuo *RequestTagUpdateOne) Save(ctx context.Context) (*RequestTag, error) {
	var (
		err  error
		node *RequestTag
	)
	if len(rtuo.hooks) == 0 {
		if err = rtuo.check(); err != nil {
			return nil, err
		}
		node, err = rtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtuo.check(); err != nil {
				return nil, err
			}
			rtuo.mutation = mutation
			node, err = rtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rtuo.hooks) - 1; i >= 0; i-- {
			mut = rtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *RequestTagUpdateOne) SaveX(ctx context.Context) *RequestTag {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *RequestTagUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *RequestTagUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtuo *RequestTagUpdateOne) check() error {
	if _, ok := rtuo.mutation.RequestID(); rtuo.mutation.RequestCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"request\"")
	}
	return nil
}

func (rtuo *RequestTagUpdateOne) sqlSave(ctx context.Context) (_node *RequestTag, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requesttag.Table,
			Columns: requesttag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requesttag.FieldID,
			},
		},
	}
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RequestTag.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requesttag.FieldID)
		for _, f := range fields {
			if !requesttag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != requesttag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: requesttag.FieldCreatedAt,
		})
	}
	if rtuo.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   requesttag.RequestTable,
			Columns: []string{requesttag.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: request.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   requesttag.RequestTable,
			Columns: []string{requesttag.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: request.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   requesttag.TagTable,
			Columns: []string{requesttag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   requesttag.TagTable,
			Columns: []string{requesttag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RequestTag{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requesttag.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
