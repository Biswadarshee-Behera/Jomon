// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/traPtitech/Jomon/ent/group"
	"github.com/traPtitech/Jomon/ent/groupuser"
	"github.com/traPtitech/Jomon/ent/predicate"
)

// GroupUserUpdate is the builder for updating GroupUser entities.
type GroupUserUpdate struct {
	config
	hooks    []Hook
	mutation *GroupUserMutation
}

// Where adds a new predicate for the GroupUserUpdate builder.
func (guu *GroupUserUpdate) Where(ps ...predicate.GroupUser) *GroupUserUpdate {
	guu.mutation.predicates = append(guu.mutation.predicates, ps...)
	return guu
}

// SetUserID sets the "user_id" field.
func (guu *GroupUserUpdate) SetUserID(s string) *GroupUserUpdate {
	guu.mutation.SetUserID(s)
	return guu
}

// SetCreatedAt sets the "created_at" field.
func (guu *GroupUserUpdate) SetCreatedAt(t time.Time) *GroupUserUpdate {
	guu.mutation.SetCreatedAt(t)
	return guu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guu *GroupUserUpdate) SetNillableCreatedAt(t *time.Time) *GroupUserUpdate {
	if t != nil {
		guu.SetCreatedAt(*t)
	}
	return guu
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (guu *GroupUserUpdate) SetGroupID(id int) *GroupUserUpdate {
	guu.mutation.SetGroupID(id)
	return guu
}

// SetGroup sets the "group" edge to the Group entity.
func (guu *GroupUserUpdate) SetGroup(g *Group) *GroupUserUpdate {
	return guu.SetGroupID(g.ID)
}

// Mutation returns the GroupUserMutation object of the builder.
func (guu *GroupUserUpdate) Mutation() *GroupUserMutation {
	return guu.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (guu *GroupUserUpdate) ClearGroup() *GroupUserUpdate {
	guu.mutation.ClearGroup()
	return guu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (guu *GroupUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(guu.hooks) == 0 {
		if err = guu.check(); err != nil {
			return 0, err
		}
		affected, err = guu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = guu.check(); err != nil {
				return 0, err
			}
			guu.mutation = mutation
			affected, err = guu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(guu.hooks) - 1; i >= 0; i-- {
			mut = guu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (guu *GroupUserUpdate) SaveX(ctx context.Context) int {
	affected, err := guu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (guu *GroupUserUpdate) Exec(ctx context.Context) error {
	_, err := guu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guu *GroupUserUpdate) ExecX(ctx context.Context) {
	if err := guu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guu *GroupUserUpdate) check() error {
	if _, ok := guu.mutation.GroupID(); guu.mutation.GroupCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"group\"")
	}
	return nil
}

func (guu *GroupUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupuser.Table,
			Columns: groupuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupuser.FieldID,
			},
		},
	}
	if ps := guu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupuser.FieldUserID,
		})
	}
	if value, ok := guu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupuser.FieldCreatedAt,
		})
	}
	if guu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupuser.GroupTable,
			Columns: []string{groupuser.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupuser.GroupTable,
			Columns: []string{groupuser.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, guu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GroupUserUpdateOne is the builder for updating a single GroupUser entity.
type GroupUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupUserMutation
}

// SetUserID sets the "user_id" field.
func (guuo *GroupUserUpdateOne) SetUserID(s string) *GroupUserUpdateOne {
	guuo.mutation.SetUserID(s)
	return guuo
}

// SetCreatedAt sets the "created_at" field.
func (guuo *GroupUserUpdateOne) SetCreatedAt(t time.Time) *GroupUserUpdateOne {
	guuo.mutation.SetCreatedAt(t)
	return guuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guuo *GroupUserUpdateOne) SetNillableCreatedAt(t *time.Time) *GroupUserUpdateOne {
	if t != nil {
		guuo.SetCreatedAt(*t)
	}
	return guuo
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (guuo *GroupUserUpdateOne) SetGroupID(id int) *GroupUserUpdateOne {
	guuo.mutation.SetGroupID(id)
	return guuo
}

// SetGroup sets the "group" edge to the Group entity.
func (guuo *GroupUserUpdateOne) SetGroup(g *Group) *GroupUserUpdateOne {
	return guuo.SetGroupID(g.ID)
}

// Mutation returns the GroupUserMutation object of the builder.
func (guuo *GroupUserUpdateOne) Mutation() *GroupUserMutation {
	return guuo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (guuo *GroupUserUpdateOne) ClearGroup() *GroupUserUpdateOne {
	guuo.mutation.ClearGroup()
	return guuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guuo *GroupUserUpdateOne) Select(field string, fields ...string) *GroupUserUpdateOne {
	guuo.fields = append([]string{field}, fields...)
	return guuo
}

// Save executes the query and returns the updated GroupUser entity.
func (guuo *GroupUserUpdateOne) Save(ctx context.Context) (*GroupUser, error) {
	var (
		err  error
		node *GroupUser
	)
	if len(guuo.hooks) == 0 {
		if err = guuo.check(); err != nil {
			return nil, err
		}
		node, err = guuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = guuo.check(); err != nil {
				return nil, err
			}
			guuo.mutation = mutation
			node, err = guuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guuo.hooks) - 1; i >= 0; i-- {
			mut = guuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guuo *GroupUserUpdateOne) SaveX(ctx context.Context) *GroupUser {
	node, err := guuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guuo *GroupUserUpdateOne) Exec(ctx context.Context) error {
	_, err := guuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guuo *GroupUserUpdateOne) ExecX(ctx context.Context) {
	if err := guuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guuo *GroupUserUpdateOne) check() error {
	if _, ok := guuo.mutation.GroupID(); guuo.mutation.GroupCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"group\"")
	}
	return nil
}

func (guuo *GroupUserUpdateOne) sqlSave(ctx context.Context) (_node *GroupUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupuser.Table,
			Columns: groupuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupuser.FieldID,
			},
		},
	}
	id, ok := guuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GroupUser.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := guuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupuser.FieldID)
		for _, f := range fields {
			if !groupuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupuser.FieldUserID,
		})
	}
	if value, ok := guuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupuser.FieldCreatedAt,
		})
	}
	if guuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupuser.GroupTable,
			Columns: []string{groupuser.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   groupuser.GroupTable,
			Columns: []string{groupuser.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroupUser{config: guuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupuser.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
