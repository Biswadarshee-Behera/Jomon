// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/traPtitech/Jomon/ent/group"
	"github.com/traPtitech/Jomon/ent/groupowner"
)

// GroupOwner is the model entity for the GroupOwner schema.
type GroupOwner struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupOwnerQuery when eager-loading is set.
	Edges       GroupOwnerEdges `json:"edges"`
	group_owner *uuid.UUID
}

// GroupOwnerEdges holds the relations/edges for other nodes in the graph.
type GroupOwnerEdges struct {
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupOwnerEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[0] {
		if e.Group == nil {
			// The edge group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupOwner) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupowner.FieldOwner:
			values[i] = new(sql.NullString)
		case groupowner.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case groupowner.FieldID:
			values[i] = new(uuid.UUID)
		case groupowner.ForeignKeys[0]: // group_owner
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GroupOwner", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupOwner fields.
func (_go *GroupOwner) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupowner.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_go.ID = *value
			}
		case groupowner.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				_go.Owner = value.String
			}
		case groupowner.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_go.CreatedAt = value.Time
			}
		case groupowner.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field group_owner", values[i])
			} else if value != nil {
				_go.group_owner = value
			}
		}
	}
	return nil
}

// QueryGroup queries the "group" edge of the GroupOwner entity.
func (_go *GroupOwner) QueryGroup() *GroupQuery {
	return (&GroupOwnerClient{config: _go.config}).QueryGroup(_go)
}

// Update returns a builder for updating this GroupOwner.
// Note that you need to call GroupOwner.Unwrap() before calling this method if this GroupOwner
// was returned from a transaction, and the transaction was committed or rolled back.
func (_go *GroupOwner) Update() *GroupOwnerUpdateOne {
	return (&GroupOwnerClient{config: _go.config}).UpdateOne(_go)
}

// Unwrap unwraps the GroupOwner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_go *GroupOwner) Unwrap() *GroupOwner {
	tx, ok := _go.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupOwner is not a transactional entity")
	}
	_go.config.driver = tx.drv
	return _go
}

// String implements the fmt.Stringer.
func (_go *GroupOwner) String() string {
	var builder strings.Builder
	builder.WriteString("GroupOwner(")
	builder.WriteString(fmt.Sprintf("id=%v", _go.ID))
	builder.WriteString(", owner=")
	builder.WriteString(_go.Owner)
	builder.WriteString(", created_at=")
	builder.WriteString(_go.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GroupOwners is a parsable slice of GroupOwner.
type GroupOwners []*GroupOwner

func (_go GroupOwners) config(cfg config) {
	for _i := range _go {
		_go[_i].config = cfg
	}
}
