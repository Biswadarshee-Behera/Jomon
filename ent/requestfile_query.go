// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/traPtitech/Jomon/ent/file"
	"github.com/traPtitech/Jomon/ent/predicate"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/requestfile"
)

// RequestFileQuery is the builder for querying RequestFile entities.
type RequestFileQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.RequestFile
	// eager-loading edges.
	withRequest *RequestQuery
	withFile    *FileQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RequestFileQuery builder.
func (rfq *RequestFileQuery) Where(ps ...predicate.RequestFile) *RequestFileQuery {
	rfq.predicates = append(rfq.predicates, ps...)
	return rfq
}

// Limit adds a limit step to the query.
func (rfq *RequestFileQuery) Limit(limit int) *RequestFileQuery {
	rfq.limit = &limit
	return rfq
}

// Offset adds an offset step to the query.
func (rfq *RequestFileQuery) Offset(offset int) *RequestFileQuery {
	rfq.offset = &offset
	return rfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rfq *RequestFileQuery) Unique(unique bool) *RequestFileQuery {
	rfq.unique = &unique
	return rfq
}

// Order adds an order step to the query.
func (rfq *RequestFileQuery) Order(o ...OrderFunc) *RequestFileQuery {
	rfq.order = append(rfq.order, o...)
	return rfq
}

// QueryRequest chains the current query on the "request" edge.
func (rfq *RequestFileQuery) QueryRequest() *RequestQuery {
	query := &RequestQuery{config: rfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(requestfile.Table, requestfile.FieldID, selector),
			sqlgraph.To(request.Table, request.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, requestfile.RequestTable, requestfile.RequestColumn),
		)
		fromU = sqlgraph.SetNeighbors(rfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFile chains the current query on the "file" edge.
func (rfq *RequestFileQuery) QueryFile() *FileQuery {
	query := &FileQuery{config: rfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(requestfile.Table, requestfile.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, requestfile.FileTable, requestfile.FileColumn),
		)
		fromU = sqlgraph.SetNeighbors(rfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RequestFile entity from the query.
// Returns a *NotFoundError when no RequestFile was found.
func (rfq *RequestFileQuery) First(ctx context.Context) (*RequestFile, error) {
	nodes, err := rfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{requestfile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rfq *RequestFileQuery) FirstX(ctx context.Context) *RequestFile {
	node, err := rfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RequestFile ID from the query.
// Returns a *NotFoundError when no RequestFile ID was found.
func (rfq *RequestFileQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{requestfile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rfq *RequestFileQuery) FirstIDX(ctx context.Context) int {
	id, err := rfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RequestFile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one RequestFile entity is not found.
// Returns a *NotFoundError when no RequestFile entities are found.
func (rfq *RequestFileQuery) Only(ctx context.Context) (*RequestFile, error) {
	nodes, err := rfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{requestfile.Label}
	default:
		return nil, &NotSingularError{requestfile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rfq *RequestFileQuery) OnlyX(ctx context.Context) *RequestFile {
	node, err := rfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RequestFile ID in the query.
// Returns a *NotSingularError when exactly one RequestFile ID is not found.
// Returns a *NotFoundError when no entities are found.
func (rfq *RequestFileQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{requestfile.Label}
	default:
		err = &NotSingularError{requestfile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rfq *RequestFileQuery) OnlyIDX(ctx context.Context) int {
	id, err := rfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RequestFiles.
func (rfq *RequestFileQuery) All(ctx context.Context) ([]*RequestFile, error) {
	if err := rfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rfq *RequestFileQuery) AllX(ctx context.Context) []*RequestFile {
	nodes, err := rfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RequestFile IDs.
func (rfq *RequestFileQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := rfq.Select(requestfile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rfq *RequestFileQuery) IDsX(ctx context.Context) []int {
	ids, err := rfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rfq *RequestFileQuery) Count(ctx context.Context) (int, error) {
	if err := rfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rfq *RequestFileQuery) CountX(ctx context.Context) int {
	count, err := rfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rfq *RequestFileQuery) Exist(ctx context.Context) (bool, error) {
	if err := rfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rfq *RequestFileQuery) ExistX(ctx context.Context) bool {
	exist, err := rfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RequestFileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rfq *RequestFileQuery) Clone() *RequestFileQuery {
	if rfq == nil {
		return nil
	}
	return &RequestFileQuery{
		config:      rfq.config,
		limit:       rfq.limit,
		offset:      rfq.offset,
		order:       append([]OrderFunc{}, rfq.order...),
		predicates:  append([]predicate.RequestFile{}, rfq.predicates...),
		withRequest: rfq.withRequest.Clone(),
		withFile:    rfq.withFile.Clone(),
		// clone intermediate query.
		sql:  rfq.sql.Clone(),
		path: rfq.path,
	}
}

// WithRequest tells the query-builder to eager-load the nodes that are connected to
// the "request" edge. The optional arguments are used to configure the query builder of the edge.
func (rfq *RequestFileQuery) WithRequest(opts ...func(*RequestQuery)) *RequestFileQuery {
	query := &RequestQuery{config: rfq.config}
	for _, opt := range opts {
		opt(query)
	}
	rfq.withRequest = query
	return rfq
}

// WithFile tells the query-builder to eager-load the nodes that are connected to
// the "file" edge. The optional arguments are used to configure the query builder of the edge.
func (rfq *RequestFileQuery) WithFile(opts ...func(*FileQuery)) *RequestFileQuery {
	query := &FileQuery{config: rfq.config}
	for _, opt := range opts {
		opt(query)
	}
	rfq.withFile = query
	return rfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RequestID int `json:"request_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RequestFile.Query().
//		GroupBy(requestfile.FieldRequestID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rfq *RequestFileQuery) GroupBy(field string, fields ...string) *RequestFileGroupBy {
	group := &RequestFileGroupBy{config: rfq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rfq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RequestID int `json:"request_id,omitempty"`
//	}
//
//	client.RequestFile.Query().
//		Select(requestfile.FieldRequestID).
//		Scan(ctx, &v)
//
func (rfq *RequestFileQuery) Select(field string, fields ...string) *RequestFileSelect {
	rfq.fields = append([]string{field}, fields...)
	return &RequestFileSelect{RequestFileQuery: rfq}
}

func (rfq *RequestFileQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rfq.fields {
		if !requestfile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rfq.path != nil {
		prev, err := rfq.path(ctx)
		if err != nil {
			return err
		}
		rfq.sql = prev
	}
	return nil
}

func (rfq *RequestFileQuery) sqlAll(ctx context.Context) ([]*RequestFile, error) {
	var (
		nodes       = []*RequestFile{}
		_spec       = rfq.querySpec()
		loadedTypes = [2]bool{
			rfq.withRequest != nil,
			rfq.withFile != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &RequestFile{config: rfq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, rfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rfq.withRequest; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*RequestFile)
		for i := range nodes {
			fk := nodes[i].RequestID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(request.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "request_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Request = n
			}
		}
	}

	if query := rfq.withFile; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*RequestFile)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.File(func(s *sql.Selector) {
			s.Where(sql.InValues(requestfile.FileColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.request_file_file
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "request_file_file" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "request_file_file" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.File = n
		}
	}

	return nodes, nil
}

func (rfq *RequestFileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rfq.querySpec()
	return sqlgraph.CountNodes(ctx, rfq.driver, _spec)
}

func (rfq *RequestFileQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rfq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (rfq *RequestFileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requestfile.Table,
			Columns: requestfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requestfile.FieldID,
			},
		},
		From:   rfq.sql,
		Unique: true,
	}
	if unique := rfq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rfq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requestfile.FieldID)
		for i := range fields {
			if fields[i] != requestfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rfq *RequestFileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rfq.driver.Dialect())
	t1 := builder.Table(requestfile.Table)
	selector := builder.Select(t1.Columns(requestfile.Columns...)...).From(t1)
	if rfq.sql != nil {
		selector = rfq.sql
		selector.Select(selector.Columns(requestfile.Columns...)...)
	}
	for _, p := range rfq.predicates {
		p(selector)
	}
	for _, p := range rfq.order {
		p(selector)
	}
	if offset := rfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RequestFileGroupBy is the group-by builder for RequestFile entities.
type RequestFileGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rfgb *RequestFileGroupBy) Aggregate(fns ...AggregateFunc) *RequestFileGroupBy {
	rfgb.fns = append(rfgb.fns, fns...)
	return rfgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rfgb *RequestFileGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rfgb.path(ctx)
	if err != nil {
		return err
	}
	rfgb.sql = query
	return rfgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rfgb *RequestFileGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rfgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (rfgb *RequestFileGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rfgb.fields) > 1 {
		return nil, errors.New("ent: RequestFileGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rfgb *RequestFileGroupBy) StringsX(ctx context.Context) []string {
	v, err := rfgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rfgb *RequestFileGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rfgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{requestfile.Label}
	default:
		err = fmt.Errorf("ent: RequestFileGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rfgb *RequestFileGroupBy) StringX(ctx context.Context) string {
	v, err := rfgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (rfgb *RequestFileGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rfgb.fields) > 1 {
		return nil, errors.New("ent: RequestFileGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rfgb *RequestFileGroupBy) IntsX(ctx context.Context) []int {
	v, err := rfgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rfgb *RequestFileGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rfgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{requestfile.Label}
	default:
		err = fmt.Errorf("ent: RequestFileGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rfgb *RequestFileGroupBy) IntX(ctx context.Context) int {
	v, err := rfgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (rfgb *RequestFileGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rfgb.fields) > 1 {
		return nil, errors.New("ent: RequestFileGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rfgb *RequestFileGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rfgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rfgb *RequestFileGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rfgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{requestfile.Label}
	default:
		err = fmt.Errorf("ent: RequestFileGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rfgb *RequestFileGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rfgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (rfgb *RequestFileGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rfgb.fields) > 1 {
		return nil, errors.New("ent: RequestFileGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rfgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rfgb *RequestFileGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rfgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rfgb *RequestFileGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rfgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{requestfile.Label}
	default:
		err = fmt.Errorf("ent: RequestFileGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rfgb *RequestFileGroupBy) BoolX(ctx context.Context) bool {
	v, err := rfgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rfgb *RequestFileGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rfgb.fields {
		if !requestfile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rfgb *RequestFileGroupBy) sqlQuery() *sql.Selector {
	selector := rfgb.sql
	columns := make([]string, 0, len(rfgb.fields)+len(rfgb.fns))
	columns = append(columns, rfgb.fields...)
	for _, fn := range rfgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(rfgb.fields...)
}

// RequestFileSelect is the builder for selecting fields of RequestFile entities.
type RequestFileSelect struct {
	*RequestFileQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rfs *RequestFileSelect) Scan(ctx context.Context, v interface{}) error {
	if err := rfs.prepareQuery(ctx); err != nil {
		return err
	}
	rfs.sql = rfs.RequestFileQuery.sqlQuery(ctx)
	return rfs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rfs *RequestFileSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rfs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (rfs *RequestFileSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rfs.fields) > 1 {
		return nil, errors.New("ent: RequestFileSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rfs *RequestFileSelect) StringsX(ctx context.Context) []string {
	v, err := rfs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (rfs *RequestFileSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rfs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{requestfile.Label}
	default:
		err = fmt.Errorf("ent: RequestFileSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rfs *RequestFileSelect) StringX(ctx context.Context) string {
	v, err := rfs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (rfs *RequestFileSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rfs.fields) > 1 {
		return nil, errors.New("ent: RequestFileSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rfs *RequestFileSelect) IntsX(ctx context.Context) []int {
	v, err := rfs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (rfs *RequestFileSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rfs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{requestfile.Label}
	default:
		err = fmt.Errorf("ent: RequestFileSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rfs *RequestFileSelect) IntX(ctx context.Context) int {
	v, err := rfs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (rfs *RequestFileSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rfs.fields) > 1 {
		return nil, errors.New("ent: RequestFileSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rfs *RequestFileSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rfs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (rfs *RequestFileSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rfs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{requestfile.Label}
	default:
		err = fmt.Errorf("ent: RequestFileSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rfs *RequestFileSelect) Float64X(ctx context.Context) float64 {
	v, err := rfs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (rfs *RequestFileSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rfs.fields) > 1 {
		return nil, errors.New("ent: RequestFileSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rfs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rfs *RequestFileSelect) BoolsX(ctx context.Context) []bool {
	v, err := rfs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (rfs *RequestFileSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rfs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{requestfile.Label}
	default:
		err = fmt.Errorf("ent: RequestFileSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rfs *RequestFileSelect) BoolX(ctx context.Context) bool {
	v, err := rfs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rfs *RequestFileSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rfs.sqlQuery().Query()
	if err := rfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rfs *RequestFileSelect) sqlQuery() sql.Querier {
	selector := rfs.sql
	selector.Select(selector.Columns(rfs.fields...)...)
	return selector
}
