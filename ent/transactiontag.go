// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/traPtitech/Jomon/ent/tag"
	"github.com/traPtitech/Jomon/ent/transaction"
	"github.com/traPtitech/Jomon/ent/transactiontag"
)

// TransactionTag is the model entity for the TransactionTag schema.
type TransactionTag struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionTagQuery when eager-loading is set.
	Edges               TransactionTagEdges `json:"edges"`
	tag_transaction_tag *int
	transaction_tag     *int
}

// TransactionTagEdges holds the relations/edges for other nodes in the graph.
type TransactionTagEdges struct {
	// Transaction holds the value of the transaction edge.
	Transaction *Transaction `json:"transaction,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TransactionOrErr returns the Transaction value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionTagEdges) TransactionOrErr() (*Transaction, error) {
	if e.loadedTypes[0] {
		if e.Transaction == nil {
			// The edge transaction was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: transaction.Label}
		}
		return e.Transaction, nil
	}
	return nil, &NotLoadedError{edge: "transaction"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionTagEdges) TagOrErr() (*Tag, error) {
	if e.loadedTypes[1] {
		if e.Tag == nil {
			// The edge tag was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tag.Label}
		}
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TransactionTag) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case transactiontag.FieldID:
			values[i] = new(sql.NullInt64)
		case transactiontag.ForeignKeys[0]: // tag_transaction_tag
			values[i] = new(sql.NullInt64)
		case transactiontag.ForeignKeys[1]: // transaction_tag
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TransactionTag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TransactionTag fields.
func (tt *TransactionTag) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transactiontag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tt.ID = int(value.Int64)
		case transactiontag.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field tag_transaction_tag", value)
			} else if value.Valid {
				tt.tag_transaction_tag = new(int)
				*tt.tag_transaction_tag = int(value.Int64)
			}
		case transactiontag.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field transaction_tag", value)
			} else if value.Valid {
				tt.transaction_tag = new(int)
				*tt.transaction_tag = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTransaction queries the "transaction" edge of the TransactionTag entity.
func (tt *TransactionTag) QueryTransaction() *TransactionQuery {
	return (&TransactionTagClient{config: tt.config}).QueryTransaction(tt)
}

// QueryTag queries the "tag" edge of the TransactionTag entity.
func (tt *TransactionTag) QueryTag() *TagQuery {
	return (&TransactionTagClient{config: tt.config}).QueryTag(tt)
}

// Update returns a builder for updating this TransactionTag.
// Note that you need to call TransactionTag.Unwrap() before calling this method if this TransactionTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TransactionTag) Update() *TransactionTagUpdateOne {
	return (&TransactionTagClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the TransactionTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TransactionTag) Unwrap() *TransactionTag {
	tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TransactionTag is not a transactional entity")
	}
	tt.config.driver = tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TransactionTag) String() string {
	var builder strings.Builder
	builder.WriteString("TransactionTag(")
	builder.WriteString(fmt.Sprintf("id=%v", tt.ID))
	builder.WriteByte(')')
	return builder.String()
}

// TransactionTags is a parsable slice of TransactionTag.
type TransactionTags []*TransactionTag

func (tt TransactionTags) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}
