// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/traPtitech/Jomon/ent/file"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/requestfile"
)

// RequestFileCreate is the builder for creating a RequestFile entity.
type RequestFileCreate struct {
	config
	mutation *RequestFileMutation
	hooks    []Hook
}

// SetRequestID sets the "request_id" field.
func (rfc *RequestFileCreate) SetRequestID(i int) *RequestFileCreate {
	rfc.mutation.SetRequestID(i)
	return rfc
}

// SetCreatedAt sets the "created_at" field.
func (rfc *RequestFileCreate) SetCreatedAt(t time.Time) *RequestFileCreate {
	rfc.mutation.SetCreatedAt(t)
	return rfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rfc *RequestFileCreate) SetNillableCreatedAt(t *time.Time) *RequestFileCreate {
	if t != nil {
		rfc.SetCreatedAt(*t)
	}
	return rfc
}

// SetRequest sets the "request" edge to the Request entity.
func (rfc *RequestFileCreate) SetRequest(r *Request) *RequestFileCreate {
	return rfc.SetRequestID(r.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (rfc *RequestFileCreate) SetFileID(id int) *RequestFileCreate {
	rfc.mutation.SetFileID(id)
	return rfc
}

// SetFile sets the "file" edge to the File entity.
func (rfc *RequestFileCreate) SetFile(f *File) *RequestFileCreate {
	return rfc.SetFileID(f.ID)
}

// Mutation returns the RequestFileMutation object of the builder.
func (rfc *RequestFileCreate) Mutation() *RequestFileMutation {
	return rfc.mutation
}

// Save creates the RequestFile in the database.
func (rfc *RequestFileCreate) Save(ctx context.Context) (*RequestFile, error) {
	var (
		err  error
		node *RequestFile
	)
	rfc.defaults()
	if len(rfc.hooks) == 0 {
		if err = rfc.check(); err != nil {
			return nil, err
		}
		node, err = rfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfc.check(); err != nil {
				return nil, err
			}
			rfc.mutation = mutation
			node, err = rfc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rfc.hooks) - 1; i >= 0; i-- {
			mut = rfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rfc *RequestFileCreate) SaveX(ctx context.Context) *RequestFile {
	v, err := rfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rfc *RequestFileCreate) defaults() {
	if _, ok := rfc.mutation.CreatedAt(); !ok {
		v := requestfile.DefaultCreatedAt()
		rfc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rfc *RequestFileCreate) check() error {
	if _, ok := rfc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New("ent: missing required field \"request_id\"")}
	}
	if _, ok := rfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := rfc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request", err: errors.New("ent: missing required edge \"request\"")}
	}
	if _, ok := rfc.mutation.FileID(); !ok {
		return &ValidationError{Name: "file", err: errors.New("ent: missing required edge \"file\"")}
	}
	return nil
}

func (rfc *RequestFileCreate) sqlSave(ctx context.Context) (*RequestFile, error) {
	_node, _spec := rfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rfc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rfc *RequestFileCreate) createSpec() (*RequestFile, *sqlgraph.CreateSpec) {
	var (
		_node = &RequestFile{config: rfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: requestfile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requestfile.FieldID,
			},
		}
	)
	if value, ok := rfc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: requestfile.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := rfc.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   requestfile.RequestTable,
			Columns: []string{requestfile.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: request.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RequestID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rfc.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   requestfile.FileTable,
			Columns: []string{requestfile.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RequestFileCreateBulk is the builder for creating many RequestFile entities in bulk.
type RequestFileCreateBulk struct {
	config
	builders []*RequestFileCreate
}

// Save creates the RequestFile entities in the database.
func (rfcb *RequestFileCreateBulk) Save(ctx context.Context) ([]*RequestFile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rfcb.builders))
	nodes := make([]*RequestFile, len(rfcb.builders))
	mutators := make([]Mutator, len(rfcb.builders))
	for i := range rfcb.builders {
		func(i int, root context.Context) {
			builder := rfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RequestFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rfcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rfcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rfcb *RequestFileCreateBulk) SaveX(ctx context.Context) []*RequestFile {
	v, err := rfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
