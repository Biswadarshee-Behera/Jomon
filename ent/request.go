// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/user"
)

// Request is the model entity for the Request schema.
type Request struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequestQuery when eager-loading is set.
	Edges RequestEdges `json:"edges"`
}

// RequestEdges holds the relations/edges for other nodes in the graph.
type RequestEdges struct {
	// Status holds the value of the status edge.
	Status []*RequestStatus `json:"status,omitempty"`
	// Target holds the value of the target edge.
	Target []*RequestTarget `json:"target,omitempty"`
	// File holds the value of the file edge.
	File []*File `json:"file,omitempty"`
	// Tag holds the value of the tag edge.
	Tag []*Tag `json:"tag,omitempty"`
	// TransactionDetail holds the value of the transaction_detail edge.
	TransactionDetail []*TransactionDetail `json:"transaction_detail,omitempty"`
	// Comment holds the value of the comment edge.
	Comment []*Comment `json:"comment,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) StatusOrErr() ([]*RequestStatus, error) {
	if e.loadedTypes[0] {
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "status"}
}

// TargetOrErr returns the Target value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) TargetOrErr() ([]*RequestTarget, error) {
	if e.loadedTypes[1] {
		return e.Target, nil
	}
	return nil, &NotLoadedError{edge: "target"}
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) FileOrErr() ([]*File, error) {
	if e.loadedTypes[2] {
		return e.File, nil
	}
	return nil, &NotLoadedError{edge: "file"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) TagOrErr() ([]*Tag, error) {
	if e.loadedTypes[3] {
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// TransactionDetailOrErr returns the TransactionDetail value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) TransactionDetailOrErr() ([]*TransactionDetail, error) {
	if e.loadedTypes[4] {
		return e.TransactionDetail, nil
	}
	return nil, &NotLoadedError{edge: "transaction_detail"}
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading.
func (e RequestEdges) CommentOrErr() ([]*Comment, error) {
	if e.loadedTypes[5] {
		return e.Comment, nil
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[6] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Request) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case request.FieldAmount:
			values[i] = new(sql.NullInt64)
		case request.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case request.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Request", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Request fields.
func (r *Request) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case request.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case request.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				r.Amount = int(value.Int64)
			}
		case request.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryStatus queries the "status" edge of the Request entity.
func (r *Request) QueryStatus() *RequestStatusQuery {
	return (&RequestClient{config: r.config}).QueryStatus(r)
}

// QueryTarget queries the "target" edge of the Request entity.
func (r *Request) QueryTarget() *RequestTargetQuery {
	return (&RequestClient{config: r.config}).QueryTarget(r)
}

// QueryFile queries the "file" edge of the Request entity.
func (r *Request) QueryFile() *FileQuery {
	return (&RequestClient{config: r.config}).QueryFile(r)
}

// QueryTag queries the "tag" edge of the Request entity.
func (r *Request) QueryTag() *TagQuery {
	return (&RequestClient{config: r.config}).QueryTag(r)
}

// QueryTransactionDetail queries the "transaction_detail" edge of the Request entity.
func (r *Request) QueryTransactionDetail() *TransactionDetailQuery {
	return (&RequestClient{config: r.config}).QueryTransactionDetail(r)
}

// QueryComment queries the "comment" edge of the Request entity.
func (r *Request) QueryComment() *CommentQuery {
	return (&RequestClient{config: r.config}).QueryComment(r)
}

// QueryUser queries the "user" edge of the Request entity.
func (r *Request) QueryUser() *UserQuery {
	return (&RequestClient{config: r.config}).QueryUser(r)
}

// Update returns a builder for updating this Request.
// Note that you need to call Request.Unwrap() before calling this method if this Request
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Request) Update() *RequestUpdateOne {
	return (&RequestClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Request entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Request) Unwrap() *Request {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Request is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Request) String() string {
	var builder strings.Builder
	builder.WriteString("Request(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", r.Amount))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Requests is a parsable slice of Request.
type Requests []*Request

func (r Requests) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
