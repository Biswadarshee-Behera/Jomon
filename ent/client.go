// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/traPtitech/Jomon/ent/migrate"

	"github.com/traPtitech/Jomon/ent/administrator"
	"github.com/traPtitech/Jomon/ent/comment"
	"github.com/traPtitech/Jomon/ent/file"
	"github.com/traPtitech/Jomon/ent/group"
	"github.com/traPtitech/Jomon/ent/groupbudget"
	"github.com/traPtitech/Jomon/ent/groupowner"
	"github.com/traPtitech/Jomon/ent/groupuser"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/requestfile"
	"github.com/traPtitech/Jomon/ent/requeststatus"
	"github.com/traPtitech/Jomon/ent/requesttag"
	"github.com/traPtitech/Jomon/ent/requesttarget"
	"github.com/traPtitech/Jomon/ent/tag"
	"github.com/traPtitech/Jomon/ent/transaction"
	"github.com/traPtitech/Jomon/ent/transactiondetail"
	"github.com/traPtitech/Jomon/ent/transactiontag"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Administrator is the client for interacting with the Administrator builders.
	Administrator *AdministratorClient
	// Comment is the client for interacting with the Comment builders.
	Comment *CommentClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupBudget is the client for interacting with the GroupBudget builders.
	GroupBudget *GroupBudgetClient
	// GroupOwner is the client for interacting with the GroupOwner builders.
	GroupOwner *GroupOwnerClient
	// GroupUser is the client for interacting with the GroupUser builders.
	GroupUser *GroupUserClient
	// Request is the client for interacting with the Request builders.
	Request *RequestClient
	// RequestFile is the client for interacting with the RequestFile builders.
	RequestFile *RequestFileClient
	// RequestStatus is the client for interacting with the RequestStatus builders.
	RequestStatus *RequestStatusClient
	// RequestTag is the client for interacting with the RequestTag builders.
	RequestTag *RequestTagClient
	// RequestTarget is the client for interacting with the RequestTarget builders.
	RequestTarget *RequestTargetClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Transaction is the client for interacting with the Transaction builders.
	Transaction *TransactionClient
	// TransactionDetail is the client for interacting with the TransactionDetail builders.
	TransactionDetail *TransactionDetailClient
	// TransactionTag is the client for interacting with the TransactionTag builders.
	TransactionTag *TransactionTagClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Administrator = NewAdministratorClient(c.config)
	c.Comment = NewCommentClient(c.config)
	c.File = NewFileClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.GroupBudget = NewGroupBudgetClient(c.config)
	c.GroupOwner = NewGroupOwnerClient(c.config)
	c.GroupUser = NewGroupUserClient(c.config)
	c.Request = NewRequestClient(c.config)
	c.RequestFile = NewRequestFileClient(c.config)
	c.RequestStatus = NewRequestStatusClient(c.config)
	c.RequestTag = NewRequestTagClient(c.config)
	c.RequestTarget = NewRequestTargetClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.Transaction = NewTransactionClient(c.config)
	c.TransactionDetail = NewTransactionDetailClient(c.config)
	c.TransactionTag = NewTransactionTagClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Administrator:     NewAdministratorClient(cfg),
		Comment:           NewCommentClient(cfg),
		File:              NewFileClient(cfg),
		Group:             NewGroupClient(cfg),
		GroupBudget:       NewGroupBudgetClient(cfg),
		GroupOwner:        NewGroupOwnerClient(cfg),
		GroupUser:         NewGroupUserClient(cfg),
		Request:           NewRequestClient(cfg),
		RequestFile:       NewRequestFileClient(cfg),
		RequestStatus:     NewRequestStatusClient(cfg),
		RequestTag:        NewRequestTagClient(cfg),
		RequestTarget:     NewRequestTargetClient(cfg),
		Tag:               NewTagClient(cfg),
		Transaction:       NewTransactionClient(cfg),
		TransactionDetail: NewTransactionDetailClient(cfg),
		TransactionTag:    NewTransactionTagClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:            cfg,
		Administrator:     NewAdministratorClient(cfg),
		Comment:           NewCommentClient(cfg),
		File:              NewFileClient(cfg),
		Group:             NewGroupClient(cfg),
		GroupBudget:       NewGroupBudgetClient(cfg),
		GroupOwner:        NewGroupOwnerClient(cfg),
		GroupUser:         NewGroupUserClient(cfg),
		Request:           NewRequestClient(cfg),
		RequestFile:       NewRequestFileClient(cfg),
		RequestStatus:     NewRequestStatusClient(cfg),
		RequestTag:        NewRequestTagClient(cfg),
		RequestTarget:     NewRequestTargetClient(cfg),
		Tag:               NewTagClient(cfg),
		Transaction:       NewTransactionClient(cfg),
		TransactionDetail: NewTransactionDetailClient(cfg),
		TransactionTag:    NewTransactionTagClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Administrator.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Administrator.Use(hooks...)
	c.Comment.Use(hooks...)
	c.File.Use(hooks...)
	c.Group.Use(hooks...)
	c.GroupBudget.Use(hooks...)
	c.GroupOwner.Use(hooks...)
	c.GroupUser.Use(hooks...)
	c.Request.Use(hooks...)
	c.RequestFile.Use(hooks...)
	c.RequestStatus.Use(hooks...)
	c.RequestTag.Use(hooks...)
	c.RequestTarget.Use(hooks...)
	c.Tag.Use(hooks...)
	c.Transaction.Use(hooks...)
	c.TransactionDetail.Use(hooks...)
	c.TransactionTag.Use(hooks...)
}

// AdministratorClient is a client for the Administrator schema.
type AdministratorClient struct {
	config
}

// NewAdministratorClient returns a client for the Administrator from the given config.
func NewAdministratorClient(c config) *AdministratorClient {
	return &AdministratorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `administrator.Hooks(f(g(h())))`.
func (c *AdministratorClient) Use(hooks ...Hook) {
	c.hooks.Administrator = append(c.hooks.Administrator, hooks...)
}

// Create returns a create builder for Administrator.
func (c *AdministratorClient) Create() *AdministratorCreate {
	mutation := newAdministratorMutation(c.config, OpCreate)
	return &AdministratorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Administrator entities.
func (c *AdministratorClient) CreateBulk(builders ...*AdministratorCreate) *AdministratorCreateBulk {
	return &AdministratorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Administrator.
func (c *AdministratorClient) Update() *AdministratorUpdate {
	mutation := newAdministratorMutation(c.config, OpUpdate)
	return &AdministratorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdministratorClient) UpdateOne(a *Administrator) *AdministratorUpdateOne {
	mutation := newAdministratorMutation(c.config, OpUpdateOne, withAdministrator(a))
	return &AdministratorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdministratorClient) UpdateOneID(id int) *AdministratorUpdateOne {
	mutation := newAdministratorMutation(c.config, OpUpdateOne, withAdministratorID(id))
	return &AdministratorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Administrator.
func (c *AdministratorClient) Delete() *AdministratorDelete {
	mutation := newAdministratorMutation(c.config, OpDelete)
	return &AdministratorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdministratorClient) DeleteOne(a *Administrator) *AdministratorDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdministratorClient) DeleteOneID(id int) *AdministratorDeleteOne {
	builder := c.Delete().Where(administrator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdministratorDeleteOne{builder}
}

// Query returns a query builder for Administrator.
func (c *AdministratorClient) Query() *AdministratorQuery {
	return &AdministratorQuery{
		config: c.config,
	}
}

// Get returns a Administrator entity by its id.
func (c *AdministratorClient) Get(ctx context.Context, id int) (*Administrator, error) {
	return c.Query().Where(administrator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdministratorClient) GetX(ctx context.Context, id int) *Administrator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AdministratorClient) Hooks() []Hook {
	return c.hooks.Administrator
}

// CommentClient is a client for the Comment schema.
type CommentClient struct {
	config
}

// NewCommentClient returns a client for the Comment from the given config.
func NewCommentClient(c config) *CommentClient {
	return &CommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comment.Hooks(f(g(h())))`.
func (c *CommentClient) Use(hooks ...Hook) {
	c.hooks.Comment = append(c.hooks.Comment, hooks...)
}

// Create returns a create builder for Comment.
func (c *CommentClient) Create() *CommentCreate {
	mutation := newCommentMutation(c.config, OpCreate)
	return &CommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comment entities.
func (c *CommentClient) CreateBulk(builders ...*CommentCreate) *CommentCreateBulk {
	return &CommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comment.
func (c *CommentClient) Update() *CommentUpdate {
	mutation := newCommentMutation(c.config, OpUpdate)
	return &CommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentClient) UpdateOne(co *Comment) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withComment(co))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentClient) UpdateOneID(id int) *CommentUpdateOne {
	mutation := newCommentMutation(c.config, OpUpdateOne, withCommentID(id))
	return &CommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comment.
func (c *CommentClient) Delete() *CommentDelete {
	mutation := newCommentMutation(c.config, OpDelete)
	return &CommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommentClient) DeleteOne(co *Comment) *CommentDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommentClient) DeleteOneID(id int) *CommentDeleteOne {
	builder := c.Delete().Where(comment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentDeleteOne{builder}
}

// Query returns a query builder for Comment.
func (c *CommentClient) Query() *CommentQuery {
	return &CommentQuery{
		config: c.config,
	}
}

// Get returns a Comment entity by its id.
func (c *CommentClient) Get(ctx context.Context, id int) (*Comment, error) {
	return c.Query().Where(comment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentClient) GetX(ctx context.Context, id int) *Comment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequest queries the request edge of a Comment.
func (c *CommentClient) QueryRequest(co *Comment) *RequestQuery {
	query := &RequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comment.Table, comment.FieldID, id),
			sqlgraph.To(request.Table, request.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comment.RequestTable, comment.RequestColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommentClient) Hooks() []Hook {
	return c.hooks.Comment
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Create returns a create builder for File.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id int) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileClient) DeleteOneID(id int) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{
		config: c.config,
	}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id int) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id int) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequestFile queries the request_file edge of a File.
func (c *FileClient) QueryRequestFile(f *File) *RequestFileQuery {
	query := &RequestFileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(requestfile.Table, requestfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, file.RequestFileTable, file.RequestFileColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	return c.hooks.File
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Create returns a create builder for Group.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id int) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GroupClient) DeleteOneID(id int) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id int) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id int) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroupBudget queries the group_budget edge of a Group.
func (c *GroupClient) QueryGroupBudget(gr *Group) *GroupBudgetQuery {
	query := &GroupBudgetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupbudget.Table, groupbudget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.GroupBudgetTable, group.GroupBudgetColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Group.
func (c *GroupClient) QueryUser(gr *Group) *GroupUserQuery {
	query := &GroupUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupuser.Table, groupuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.UserTable, group.UserColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Group.
func (c *GroupClient) QueryOwner(gr *Group) *GroupOwnerQuery {
	query := &GroupOwnerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupowner.Table, groupowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.OwnerTable, group.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// GroupBudgetClient is a client for the GroupBudget schema.
type GroupBudgetClient struct {
	config
}

// NewGroupBudgetClient returns a client for the GroupBudget from the given config.
func NewGroupBudgetClient(c config) *GroupBudgetClient {
	return &GroupBudgetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupbudget.Hooks(f(g(h())))`.
func (c *GroupBudgetClient) Use(hooks ...Hook) {
	c.hooks.GroupBudget = append(c.hooks.GroupBudget, hooks...)
}

// Create returns a create builder for GroupBudget.
func (c *GroupBudgetClient) Create() *GroupBudgetCreate {
	mutation := newGroupBudgetMutation(c.config, OpCreate)
	return &GroupBudgetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupBudget entities.
func (c *GroupBudgetClient) CreateBulk(builders ...*GroupBudgetCreate) *GroupBudgetCreateBulk {
	return &GroupBudgetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupBudget.
func (c *GroupBudgetClient) Update() *GroupBudgetUpdate {
	mutation := newGroupBudgetMutation(c.config, OpUpdate)
	return &GroupBudgetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupBudgetClient) UpdateOne(gb *GroupBudget) *GroupBudgetUpdateOne {
	mutation := newGroupBudgetMutation(c.config, OpUpdateOne, withGroupBudget(gb))
	return &GroupBudgetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupBudgetClient) UpdateOneID(id int) *GroupBudgetUpdateOne {
	mutation := newGroupBudgetMutation(c.config, OpUpdateOne, withGroupBudgetID(id))
	return &GroupBudgetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupBudget.
func (c *GroupBudgetClient) Delete() *GroupBudgetDelete {
	mutation := newGroupBudgetMutation(c.config, OpDelete)
	return &GroupBudgetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GroupBudgetClient) DeleteOne(gb *GroupBudget) *GroupBudgetDeleteOne {
	return c.DeleteOneID(gb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GroupBudgetClient) DeleteOneID(id int) *GroupBudgetDeleteOne {
	builder := c.Delete().Where(groupbudget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupBudgetDeleteOne{builder}
}

// Query returns a query builder for GroupBudget.
func (c *GroupBudgetClient) Query() *GroupBudgetQuery {
	return &GroupBudgetQuery{
		config: c.config,
	}
}

// Get returns a GroupBudget entity by its id.
func (c *GroupBudgetClient) Get(ctx context.Context, id int) (*GroupBudget, error) {
	return c.Query().Where(groupbudget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupBudgetClient) GetX(ctx context.Context, id int) *GroupBudget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a GroupBudget.
func (c *GroupBudgetClient) QueryGroup(gb *GroupBudget) *GroupQuery {
	query := &GroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupbudget.Table, groupbudget.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupbudget.GroupTable, groupbudget.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(gb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupBudgetClient) Hooks() []Hook {
	return c.hooks.GroupBudget
}

// GroupOwnerClient is a client for the GroupOwner schema.
type GroupOwnerClient struct {
	config
}

// NewGroupOwnerClient returns a client for the GroupOwner from the given config.
func NewGroupOwnerClient(c config) *GroupOwnerClient {
	return &GroupOwnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupowner.Hooks(f(g(h())))`.
func (c *GroupOwnerClient) Use(hooks ...Hook) {
	c.hooks.GroupOwner = append(c.hooks.GroupOwner, hooks...)
}

// Create returns a create builder for GroupOwner.
func (c *GroupOwnerClient) Create() *GroupOwnerCreate {
	mutation := newGroupOwnerMutation(c.config, OpCreate)
	return &GroupOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupOwner entities.
func (c *GroupOwnerClient) CreateBulk(builders ...*GroupOwnerCreate) *GroupOwnerCreateBulk {
	return &GroupOwnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupOwner.
func (c *GroupOwnerClient) Update() *GroupOwnerUpdate {
	mutation := newGroupOwnerMutation(c.config, OpUpdate)
	return &GroupOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupOwnerClient) UpdateOne(_go *GroupOwner) *GroupOwnerUpdateOne {
	mutation := newGroupOwnerMutation(c.config, OpUpdateOne, withGroupOwner(_go))
	return &GroupOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupOwnerClient) UpdateOneID(id int) *GroupOwnerUpdateOne {
	mutation := newGroupOwnerMutation(c.config, OpUpdateOne, withGroupOwnerID(id))
	return &GroupOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupOwner.
func (c *GroupOwnerClient) Delete() *GroupOwnerDelete {
	mutation := newGroupOwnerMutation(c.config, OpDelete)
	return &GroupOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GroupOwnerClient) DeleteOne(_go *GroupOwner) *GroupOwnerDeleteOne {
	return c.DeleteOneID(_go.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GroupOwnerClient) DeleteOneID(id int) *GroupOwnerDeleteOne {
	builder := c.Delete().Where(groupowner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupOwnerDeleteOne{builder}
}

// Query returns a query builder for GroupOwner.
func (c *GroupOwnerClient) Query() *GroupOwnerQuery {
	return &GroupOwnerQuery{
		config: c.config,
	}
}

// Get returns a GroupOwner entity by its id.
func (c *GroupOwnerClient) Get(ctx context.Context, id int) (*GroupOwner, error) {
	return c.Query().Where(groupowner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupOwnerClient) GetX(ctx context.Context, id int) *GroupOwner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a GroupOwner.
func (c *GroupOwnerClient) QueryGroup(_go *GroupOwner) *GroupQuery {
	query := &GroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupowner.Table, groupowner.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupowner.GroupTable, groupowner.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupOwnerClient) Hooks() []Hook {
	return c.hooks.GroupOwner
}

// GroupUserClient is a client for the GroupUser schema.
type GroupUserClient struct {
	config
}

// NewGroupUserClient returns a client for the GroupUser from the given config.
func NewGroupUserClient(c config) *GroupUserClient {
	return &GroupUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupuser.Hooks(f(g(h())))`.
func (c *GroupUserClient) Use(hooks ...Hook) {
	c.hooks.GroupUser = append(c.hooks.GroupUser, hooks...)
}

// Create returns a create builder for GroupUser.
func (c *GroupUserClient) Create() *GroupUserCreate {
	mutation := newGroupUserMutation(c.config, OpCreate)
	return &GroupUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupUser entities.
func (c *GroupUserClient) CreateBulk(builders ...*GroupUserCreate) *GroupUserCreateBulk {
	return &GroupUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupUser.
func (c *GroupUserClient) Update() *GroupUserUpdate {
	mutation := newGroupUserMutation(c.config, OpUpdate)
	return &GroupUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupUserClient) UpdateOne(gu *GroupUser) *GroupUserUpdateOne {
	mutation := newGroupUserMutation(c.config, OpUpdateOne, withGroupUser(gu))
	return &GroupUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupUserClient) UpdateOneID(id int) *GroupUserUpdateOne {
	mutation := newGroupUserMutation(c.config, OpUpdateOne, withGroupUserID(id))
	return &GroupUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupUser.
func (c *GroupUserClient) Delete() *GroupUserDelete {
	mutation := newGroupUserMutation(c.config, OpDelete)
	return &GroupUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GroupUserClient) DeleteOne(gu *GroupUser) *GroupUserDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GroupUserClient) DeleteOneID(id int) *GroupUserDeleteOne {
	builder := c.Delete().Where(groupuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupUserDeleteOne{builder}
}

// Query returns a query builder for GroupUser.
func (c *GroupUserClient) Query() *GroupUserQuery {
	return &GroupUserQuery{
		config: c.config,
	}
}

// Get returns a GroupUser entity by its id.
func (c *GroupUserClient) Get(ctx context.Context, id int) (*GroupUser, error) {
	return c.Query().Where(groupuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupUserClient) GetX(ctx context.Context, id int) *GroupUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a GroupUser.
func (c *GroupUserClient) QueryGroup(gu *GroupUser) *GroupQuery {
	query := &GroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupuser.Table, groupuser.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupuser.GroupTable, groupuser.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupUserClient) Hooks() []Hook {
	return c.hooks.GroupUser
}

// RequestClient is a client for the Request schema.
type RequestClient struct {
	config
}

// NewRequestClient returns a client for the Request from the given config.
func NewRequestClient(c config) *RequestClient {
	return &RequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `request.Hooks(f(g(h())))`.
func (c *RequestClient) Use(hooks ...Hook) {
	c.hooks.Request = append(c.hooks.Request, hooks...)
}

// Create returns a create builder for Request.
func (c *RequestClient) Create() *RequestCreate {
	mutation := newRequestMutation(c.config, OpCreate)
	return &RequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Request entities.
func (c *RequestClient) CreateBulk(builders ...*RequestCreate) *RequestCreateBulk {
	return &RequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Request.
func (c *RequestClient) Update() *RequestUpdate {
	mutation := newRequestMutation(c.config, OpUpdate)
	return &RequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequestClient) UpdateOne(r *Request) *RequestUpdateOne {
	mutation := newRequestMutation(c.config, OpUpdateOne, withRequest(r))
	return &RequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequestClient) UpdateOneID(id int) *RequestUpdateOne {
	mutation := newRequestMutation(c.config, OpUpdateOne, withRequestID(id))
	return &RequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Request.
func (c *RequestClient) Delete() *RequestDelete {
	mutation := newRequestMutation(c.config, OpDelete)
	return &RequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RequestClient) DeleteOne(r *Request) *RequestDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RequestClient) DeleteOneID(id int) *RequestDeleteOne {
	builder := c.Delete().Where(request.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequestDeleteOne{builder}
}

// Query returns a query builder for Request.
func (c *RequestClient) Query() *RequestQuery {
	return &RequestQuery{
		config: c.config,
	}
}

// Get returns a Request entity by its id.
func (c *RequestClient) Get(ctx context.Context, id int) (*Request, error) {
	return c.Query().Where(request.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequestClient) GetX(ctx context.Context, id int) *Request {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatus queries the status edge of a Request.
func (c *RequestClient) QueryStatus(r *Request) *RequestStatusQuery {
	query := &RequestStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(request.Table, request.FieldID, id),
			sqlgraph.To(requeststatus.Table, requeststatus.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, request.StatusTable, request.StatusColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTarget queries the target edge of a Request.
func (c *RequestClient) QueryTarget(r *Request) *RequestTargetQuery {
	query := &RequestTargetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(request.Table, request.FieldID, id),
			sqlgraph.To(requesttarget.Table, requesttarget.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, request.TargetTable, request.TargetColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a Request.
func (c *RequestClient) QueryFile(r *Request) *RequestFileQuery {
	query := &RequestFileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(request.Table, request.FieldID, id),
			sqlgraph.To(requestfile.Table, requestfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, request.FileTable, request.FileColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTag queries the tag edge of a Request.
func (c *RequestClient) QueryTag(r *Request) *RequestTagQuery {
	query := &RequestTagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(request.Table, request.FieldID, id),
			sqlgraph.To(requesttag.Table, requesttag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, request.TagTable, request.TagColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactionDetail queries the transaction_detail edge of a Request.
func (c *RequestClient) QueryTransactionDetail(r *Request) *TransactionDetailQuery {
	query := &TransactionDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(request.Table, request.FieldID, id),
			sqlgraph.To(transactiondetail.Table, transactiondetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, request.TransactionDetailTable, request.TransactionDetailColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComment queries the comment edge of a Request.
func (c *RequestClient) QueryComment(r *Request) *CommentQuery {
	query := &CommentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(request.Table, request.FieldID, id),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, request.CommentTable, request.CommentColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RequestClient) Hooks() []Hook {
	return c.hooks.Request
}

// RequestFileClient is a client for the RequestFile schema.
type RequestFileClient struct {
	config
}

// NewRequestFileClient returns a client for the RequestFile from the given config.
func NewRequestFileClient(c config) *RequestFileClient {
	return &RequestFileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `requestfile.Hooks(f(g(h())))`.
func (c *RequestFileClient) Use(hooks ...Hook) {
	c.hooks.RequestFile = append(c.hooks.RequestFile, hooks...)
}

// Create returns a create builder for RequestFile.
func (c *RequestFileClient) Create() *RequestFileCreate {
	mutation := newRequestFileMutation(c.config, OpCreate)
	return &RequestFileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RequestFile entities.
func (c *RequestFileClient) CreateBulk(builders ...*RequestFileCreate) *RequestFileCreateBulk {
	return &RequestFileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RequestFile.
func (c *RequestFileClient) Update() *RequestFileUpdate {
	mutation := newRequestFileMutation(c.config, OpUpdate)
	return &RequestFileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequestFileClient) UpdateOne(rf *RequestFile) *RequestFileUpdateOne {
	mutation := newRequestFileMutation(c.config, OpUpdateOne, withRequestFile(rf))
	return &RequestFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequestFileClient) UpdateOneID(id int) *RequestFileUpdateOne {
	mutation := newRequestFileMutation(c.config, OpUpdateOne, withRequestFileID(id))
	return &RequestFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RequestFile.
func (c *RequestFileClient) Delete() *RequestFileDelete {
	mutation := newRequestFileMutation(c.config, OpDelete)
	return &RequestFileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RequestFileClient) DeleteOne(rf *RequestFile) *RequestFileDeleteOne {
	return c.DeleteOneID(rf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RequestFileClient) DeleteOneID(id int) *RequestFileDeleteOne {
	builder := c.Delete().Where(requestfile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequestFileDeleteOne{builder}
}

// Query returns a query builder for RequestFile.
func (c *RequestFileClient) Query() *RequestFileQuery {
	return &RequestFileQuery{
		config: c.config,
	}
}

// Get returns a RequestFile entity by its id.
func (c *RequestFileClient) Get(ctx context.Context, id int) (*RequestFile, error) {
	return c.Query().Where(requestfile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequestFileClient) GetX(ctx context.Context, id int) *RequestFile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequest queries the request edge of a RequestFile.
func (c *RequestFileClient) QueryRequest(rf *RequestFile) *RequestQuery {
	query := &RequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(requestfile.Table, requestfile.FieldID, id),
			sqlgraph.To(request.Table, request.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, requestfile.RequestTable, requestfile.RequestColumn),
		)
		fromV = sqlgraph.Neighbors(rf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a RequestFile.
func (c *RequestFileClient) QueryFile(rf *RequestFile) *FileQuery {
	query := &FileQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(requestfile.Table, requestfile.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, requestfile.FileTable, requestfile.FileColumn),
		)
		fromV = sqlgraph.Neighbors(rf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RequestFileClient) Hooks() []Hook {
	return c.hooks.RequestFile
}

// RequestStatusClient is a client for the RequestStatus schema.
type RequestStatusClient struct {
	config
}

// NewRequestStatusClient returns a client for the RequestStatus from the given config.
func NewRequestStatusClient(c config) *RequestStatusClient {
	return &RequestStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `requeststatus.Hooks(f(g(h())))`.
func (c *RequestStatusClient) Use(hooks ...Hook) {
	c.hooks.RequestStatus = append(c.hooks.RequestStatus, hooks...)
}

// Create returns a create builder for RequestStatus.
func (c *RequestStatusClient) Create() *RequestStatusCreate {
	mutation := newRequestStatusMutation(c.config, OpCreate)
	return &RequestStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RequestStatus entities.
func (c *RequestStatusClient) CreateBulk(builders ...*RequestStatusCreate) *RequestStatusCreateBulk {
	return &RequestStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RequestStatus.
func (c *RequestStatusClient) Update() *RequestStatusUpdate {
	mutation := newRequestStatusMutation(c.config, OpUpdate)
	return &RequestStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequestStatusClient) UpdateOne(rs *RequestStatus) *RequestStatusUpdateOne {
	mutation := newRequestStatusMutation(c.config, OpUpdateOne, withRequestStatus(rs))
	return &RequestStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequestStatusClient) UpdateOneID(id int) *RequestStatusUpdateOne {
	mutation := newRequestStatusMutation(c.config, OpUpdateOne, withRequestStatusID(id))
	return &RequestStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RequestStatus.
func (c *RequestStatusClient) Delete() *RequestStatusDelete {
	mutation := newRequestStatusMutation(c.config, OpDelete)
	return &RequestStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RequestStatusClient) DeleteOne(rs *RequestStatus) *RequestStatusDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RequestStatusClient) DeleteOneID(id int) *RequestStatusDeleteOne {
	builder := c.Delete().Where(requeststatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequestStatusDeleteOne{builder}
}

// Query returns a query builder for RequestStatus.
func (c *RequestStatusClient) Query() *RequestStatusQuery {
	return &RequestStatusQuery{
		config: c.config,
	}
}

// Get returns a RequestStatus entity by its id.
func (c *RequestStatusClient) Get(ctx context.Context, id int) (*RequestStatus, error) {
	return c.Query().Where(requeststatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequestStatusClient) GetX(ctx context.Context, id int) *RequestStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequest queries the request edge of a RequestStatus.
func (c *RequestStatusClient) QueryRequest(rs *RequestStatus) *RequestQuery {
	query := &RequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(requeststatus.Table, requeststatus.FieldID, id),
			sqlgraph.To(request.Table, request.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, requeststatus.RequestTable, requeststatus.RequestColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RequestStatusClient) Hooks() []Hook {
	return c.hooks.RequestStatus
}

// RequestTagClient is a client for the RequestTag schema.
type RequestTagClient struct {
	config
}

// NewRequestTagClient returns a client for the RequestTag from the given config.
func NewRequestTagClient(c config) *RequestTagClient {
	return &RequestTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `requesttag.Hooks(f(g(h())))`.
func (c *RequestTagClient) Use(hooks ...Hook) {
	c.hooks.RequestTag = append(c.hooks.RequestTag, hooks...)
}

// Create returns a create builder for RequestTag.
func (c *RequestTagClient) Create() *RequestTagCreate {
	mutation := newRequestTagMutation(c.config, OpCreate)
	return &RequestTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RequestTag entities.
func (c *RequestTagClient) CreateBulk(builders ...*RequestTagCreate) *RequestTagCreateBulk {
	return &RequestTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RequestTag.
func (c *RequestTagClient) Update() *RequestTagUpdate {
	mutation := newRequestTagMutation(c.config, OpUpdate)
	return &RequestTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequestTagClient) UpdateOne(rt *RequestTag) *RequestTagUpdateOne {
	mutation := newRequestTagMutation(c.config, OpUpdateOne, withRequestTag(rt))
	return &RequestTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequestTagClient) UpdateOneID(id int) *RequestTagUpdateOne {
	mutation := newRequestTagMutation(c.config, OpUpdateOne, withRequestTagID(id))
	return &RequestTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RequestTag.
func (c *RequestTagClient) Delete() *RequestTagDelete {
	mutation := newRequestTagMutation(c.config, OpDelete)
	return &RequestTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RequestTagClient) DeleteOne(rt *RequestTag) *RequestTagDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RequestTagClient) DeleteOneID(id int) *RequestTagDeleteOne {
	builder := c.Delete().Where(requesttag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequestTagDeleteOne{builder}
}

// Query returns a query builder for RequestTag.
func (c *RequestTagClient) Query() *RequestTagQuery {
	return &RequestTagQuery{
		config: c.config,
	}
}

// Get returns a RequestTag entity by its id.
func (c *RequestTagClient) Get(ctx context.Context, id int) (*RequestTag, error) {
	return c.Query().Where(requesttag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequestTagClient) GetX(ctx context.Context, id int) *RequestTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequest queries the request edge of a RequestTag.
func (c *RequestTagClient) QueryRequest(rt *RequestTag) *RequestQuery {
	query := &RequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(requesttag.Table, requesttag.FieldID, id),
			sqlgraph.To(request.Table, request.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, requesttag.RequestTable, requesttag.RequestColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTag queries the tag edge of a RequestTag.
func (c *RequestTagClient) QueryTag(rt *RequestTag) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(requesttag.Table, requesttag.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, requesttag.TagTable, requesttag.TagColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RequestTagClient) Hooks() []Hook {
	return c.hooks.RequestTag
}

// RequestTargetClient is a client for the RequestTarget schema.
type RequestTargetClient struct {
	config
}

// NewRequestTargetClient returns a client for the RequestTarget from the given config.
func NewRequestTargetClient(c config) *RequestTargetClient {
	return &RequestTargetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `requesttarget.Hooks(f(g(h())))`.
func (c *RequestTargetClient) Use(hooks ...Hook) {
	c.hooks.RequestTarget = append(c.hooks.RequestTarget, hooks...)
}

// Create returns a create builder for RequestTarget.
func (c *RequestTargetClient) Create() *RequestTargetCreate {
	mutation := newRequestTargetMutation(c.config, OpCreate)
	return &RequestTargetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RequestTarget entities.
func (c *RequestTargetClient) CreateBulk(builders ...*RequestTargetCreate) *RequestTargetCreateBulk {
	return &RequestTargetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RequestTarget.
func (c *RequestTargetClient) Update() *RequestTargetUpdate {
	mutation := newRequestTargetMutation(c.config, OpUpdate)
	return &RequestTargetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequestTargetClient) UpdateOne(rt *RequestTarget) *RequestTargetUpdateOne {
	mutation := newRequestTargetMutation(c.config, OpUpdateOne, withRequestTarget(rt))
	return &RequestTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequestTargetClient) UpdateOneID(id int) *RequestTargetUpdateOne {
	mutation := newRequestTargetMutation(c.config, OpUpdateOne, withRequestTargetID(id))
	return &RequestTargetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RequestTarget.
func (c *RequestTargetClient) Delete() *RequestTargetDelete {
	mutation := newRequestTargetMutation(c.config, OpDelete)
	return &RequestTargetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RequestTargetClient) DeleteOne(rt *RequestTarget) *RequestTargetDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RequestTargetClient) DeleteOneID(id int) *RequestTargetDeleteOne {
	builder := c.Delete().Where(requesttarget.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequestTargetDeleteOne{builder}
}

// Query returns a query builder for RequestTarget.
func (c *RequestTargetClient) Query() *RequestTargetQuery {
	return &RequestTargetQuery{
		config: c.config,
	}
}

// Get returns a RequestTarget entity by its id.
func (c *RequestTargetClient) Get(ctx context.Context, id int) (*RequestTarget, error) {
	return c.Query().Where(requesttarget.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequestTargetClient) GetX(ctx context.Context, id int) *RequestTarget {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequest queries the request edge of a RequestTarget.
func (c *RequestTargetClient) QueryRequest(rt *RequestTarget) *RequestQuery {
	query := &RequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(requesttarget.Table, requesttarget.FieldID, id),
			sqlgraph.To(request.Table, request.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, requesttarget.RequestTable, requesttarget.RequestColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RequestTargetClient) Hooks() []Hook {
	return c.hooks.RequestTarget
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRequestTag queries the request_tag edge of a Tag.
func (c *TagClient) QueryRequestTag(t *Tag) *RequestTagQuery {
	query := &RequestTagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(requesttag.Table, requesttag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tag.RequestTagTable, tag.RequestTagColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransactionTag queries the transaction_tag edge of a Tag.
func (c *TagClient) QueryTransactionTag(t *Tag) *TransactionTagQuery {
	query := &TransactionTagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(transactiontag.Table, transactiontag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tag.TransactionTagTable, tag.TransactionTagColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// TransactionClient is a client for the Transaction schema.
type TransactionClient struct {
	config
}

// NewTransactionClient returns a client for the Transaction from the given config.
func NewTransactionClient(c config) *TransactionClient {
	return &TransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transaction.Hooks(f(g(h())))`.
func (c *TransactionClient) Use(hooks ...Hook) {
	c.hooks.Transaction = append(c.hooks.Transaction, hooks...)
}

// Create returns a create builder for Transaction.
func (c *TransactionClient) Create() *TransactionCreate {
	mutation := newTransactionMutation(c.config, OpCreate)
	return &TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transaction entities.
func (c *TransactionClient) CreateBulk(builders ...*TransactionCreate) *TransactionCreateBulk {
	return &TransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transaction.
func (c *TransactionClient) Update() *TransactionUpdate {
	mutation := newTransactionMutation(c.config, OpUpdate)
	return &TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionClient) UpdateOne(t *Transaction) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransaction(t))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionClient) UpdateOneID(id int) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransactionID(id))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transaction.
func (c *TransactionClient) Delete() *TransactionDelete {
	mutation := newTransactionMutation(c.config, OpDelete)
	return &TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TransactionClient) DeleteOne(t *Transaction) *TransactionDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TransactionClient) DeleteOneID(id int) *TransactionDeleteOne {
	builder := c.Delete().Where(transaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionDeleteOne{builder}
}

// Query returns a query builder for Transaction.
func (c *TransactionClient) Query() *TransactionQuery {
	return &TransactionQuery{
		config: c.config,
	}
}

// Get returns a Transaction entity by its id.
func (c *TransactionClient) Get(ctx context.Context, id int) (*Transaction, error) {
	return c.Query().Where(transaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionClient) GetX(ctx context.Context, id int) *Transaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDetail queries the detail edge of a Transaction.
func (c *TransactionClient) QueryDetail(t *Transaction) *TransactionDetailQuery {
	query := &TransactionDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(transactiondetail.Table, transactiondetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, transaction.DetailTable, transaction.DetailColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTag queries the tag edge of a Transaction.
func (c *TransactionClient) QueryTag(t *Transaction) *TransactionTagQuery {
	query := &TransactionTagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(transactiontag.Table, transactiontag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, transaction.TagTable, transaction.TagColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionClient) Hooks() []Hook {
	return c.hooks.Transaction
}

// TransactionDetailClient is a client for the TransactionDetail schema.
type TransactionDetailClient struct {
	config
}

// NewTransactionDetailClient returns a client for the TransactionDetail from the given config.
func NewTransactionDetailClient(c config) *TransactionDetailClient {
	return &TransactionDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactiondetail.Hooks(f(g(h())))`.
func (c *TransactionDetailClient) Use(hooks ...Hook) {
	c.hooks.TransactionDetail = append(c.hooks.TransactionDetail, hooks...)
}

// Create returns a create builder for TransactionDetail.
func (c *TransactionDetailClient) Create() *TransactionDetailCreate {
	mutation := newTransactionDetailMutation(c.config, OpCreate)
	return &TransactionDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TransactionDetail entities.
func (c *TransactionDetailClient) CreateBulk(builders ...*TransactionDetailCreate) *TransactionDetailCreateBulk {
	return &TransactionDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TransactionDetail.
func (c *TransactionDetailClient) Update() *TransactionDetailUpdate {
	mutation := newTransactionDetailMutation(c.config, OpUpdate)
	return &TransactionDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionDetailClient) UpdateOne(td *TransactionDetail) *TransactionDetailUpdateOne {
	mutation := newTransactionDetailMutation(c.config, OpUpdateOne, withTransactionDetail(td))
	return &TransactionDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionDetailClient) UpdateOneID(id int) *TransactionDetailUpdateOne {
	mutation := newTransactionDetailMutation(c.config, OpUpdateOne, withTransactionDetailID(id))
	return &TransactionDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TransactionDetail.
func (c *TransactionDetailClient) Delete() *TransactionDetailDelete {
	mutation := newTransactionDetailMutation(c.config, OpDelete)
	return &TransactionDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TransactionDetailClient) DeleteOne(td *TransactionDetail) *TransactionDetailDeleteOne {
	return c.DeleteOneID(td.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TransactionDetailClient) DeleteOneID(id int) *TransactionDetailDeleteOne {
	builder := c.Delete().Where(transactiondetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionDetailDeleteOne{builder}
}

// Query returns a query builder for TransactionDetail.
func (c *TransactionDetailClient) Query() *TransactionDetailQuery {
	return &TransactionDetailQuery{
		config: c.config,
	}
}

// Get returns a TransactionDetail entity by its id.
func (c *TransactionDetailClient) Get(ctx context.Context, id int) (*TransactionDetail, error) {
	return c.Query().Where(transactiondetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionDetailClient) GetX(ctx context.Context, id int) *TransactionDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransaction queries the transaction edge of a TransactionDetail.
func (c *TransactionDetailClient) QueryTransaction(td *TransactionDetail) *TransactionQuery {
	query := &TransactionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := td.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transactiondetail.Table, transactiondetail.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, transactiondetail.TransactionTable, transactiondetail.TransactionColumn),
		)
		fromV = sqlgraph.Neighbors(td.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRequest queries the request edge of a TransactionDetail.
func (c *TransactionDetailClient) QueryRequest(td *TransactionDetail) *RequestQuery {
	query := &RequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := td.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transactiondetail.Table, transactiondetail.FieldID, id),
			sqlgraph.To(request.Table, request.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transactiondetail.RequestTable, transactiondetail.RequestColumn),
		)
		fromV = sqlgraph.Neighbors(td.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionDetailClient) Hooks() []Hook {
	return c.hooks.TransactionDetail
}

// TransactionTagClient is a client for the TransactionTag schema.
type TransactionTagClient struct {
	config
}

// NewTransactionTagClient returns a client for the TransactionTag from the given config.
func NewTransactionTagClient(c config) *TransactionTagClient {
	return &TransactionTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transactiontag.Hooks(f(g(h())))`.
func (c *TransactionTagClient) Use(hooks ...Hook) {
	c.hooks.TransactionTag = append(c.hooks.TransactionTag, hooks...)
}

// Create returns a create builder for TransactionTag.
func (c *TransactionTagClient) Create() *TransactionTagCreate {
	mutation := newTransactionTagMutation(c.config, OpCreate)
	return &TransactionTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TransactionTag entities.
func (c *TransactionTagClient) CreateBulk(builders ...*TransactionTagCreate) *TransactionTagCreateBulk {
	return &TransactionTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TransactionTag.
func (c *TransactionTagClient) Update() *TransactionTagUpdate {
	mutation := newTransactionTagMutation(c.config, OpUpdate)
	return &TransactionTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionTagClient) UpdateOne(tt *TransactionTag) *TransactionTagUpdateOne {
	mutation := newTransactionTagMutation(c.config, OpUpdateOne, withTransactionTag(tt))
	return &TransactionTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionTagClient) UpdateOneID(id int) *TransactionTagUpdateOne {
	mutation := newTransactionTagMutation(c.config, OpUpdateOne, withTransactionTagID(id))
	return &TransactionTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TransactionTag.
func (c *TransactionTagClient) Delete() *TransactionTagDelete {
	mutation := newTransactionTagMutation(c.config, OpDelete)
	return &TransactionTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TransactionTagClient) DeleteOne(tt *TransactionTag) *TransactionTagDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TransactionTagClient) DeleteOneID(id int) *TransactionTagDeleteOne {
	builder := c.Delete().Where(transactiontag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionTagDeleteOne{builder}
}

// Query returns a query builder for TransactionTag.
func (c *TransactionTagClient) Query() *TransactionTagQuery {
	return &TransactionTagQuery{
		config: c.config,
	}
}

// Get returns a TransactionTag entity by its id.
func (c *TransactionTagClient) Get(ctx context.Context, id int) (*TransactionTag, error) {
	return c.Query().Where(transactiontag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionTagClient) GetX(ctx context.Context, id int) *TransactionTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransaction queries the transaction edge of a TransactionTag.
func (c *TransactionTagClient) QueryTransaction(tt *TransactionTag) *TransactionQuery {
	query := &TransactionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transactiontag.Table, transactiontag.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transactiontag.TransactionTable, transactiontag.TransactionColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTag queries the tag edge of a TransactionTag.
func (c *TransactionTagClient) QueryTag(tt *TransactionTag) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transactiontag.Table, transactiontag.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transactiontag.TagTable, transactiontag.TagColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionTagClient) Hooks() []Hook {
	return c.hooks.TransactionTag
}
