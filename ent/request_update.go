// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/traPtitech/Jomon/ent/comment"
	"github.com/traPtitech/Jomon/ent/predicate"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/requestfile"
	"github.com/traPtitech/Jomon/ent/requeststatus"
	"github.com/traPtitech/Jomon/ent/requesttag"
	"github.com/traPtitech/Jomon/ent/requesttarget"
	"github.com/traPtitech/Jomon/ent/transactiondetail"
)

// RequestUpdate is the builder for updating Request entities.
type RequestUpdate struct {
	config
	hooks    []Hook
	mutation *RequestMutation
}

// Where adds a new predicate for the RequestUpdate builder.
func (ru *RequestUpdate) Where(ps ...predicate.Request) *RequestUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetCreatedBy sets the "created_by" field.
func (ru *RequestUpdate) SetCreatedBy(s string) *RequestUpdate {
	ru.mutation.SetCreatedBy(s)
	return ru
}

// SetAmount sets the "amount" field.
func (ru *RequestUpdate) SetAmount(i int) *RequestUpdate {
	ru.mutation.ResetAmount()
	ru.mutation.SetAmount(i)
	return ru
}

// AddAmount adds i to the "amount" field.
func (ru *RequestUpdate) AddAmount(i int) *RequestUpdate {
	ru.mutation.AddAmount(i)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RequestUpdate) SetCreatedAt(t time.Time) *RequestUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableCreatedAt(t *time.Time) *RequestUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// AddStatuIDs adds the "status" edge to the RequestStatus entity by IDs.
func (ru *RequestUpdate) AddStatuIDs(ids ...int) *RequestUpdate {
	ru.mutation.AddStatuIDs(ids...)
	return ru
}

// AddStatus adds the "status" edges to the RequestStatus entity.
func (ru *RequestUpdate) AddStatus(r ...*RequestStatus) *RequestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddStatuIDs(ids...)
}

// AddTargetIDs adds the "target" edge to the RequestTarget entity by IDs.
func (ru *RequestUpdate) AddTargetIDs(ids ...int) *RequestUpdate {
	ru.mutation.AddTargetIDs(ids...)
	return ru
}

// AddTarget adds the "target" edges to the RequestTarget entity.
func (ru *RequestUpdate) AddTarget(r ...*RequestTarget) *RequestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddTargetIDs(ids...)
}

// AddFileIDs adds the "file" edge to the RequestFile entity by IDs.
func (ru *RequestUpdate) AddFileIDs(ids ...int) *RequestUpdate {
	ru.mutation.AddFileIDs(ids...)
	return ru
}

// AddFile adds the "file" edges to the RequestFile entity.
func (ru *RequestUpdate) AddFile(r ...*RequestFile) *RequestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddFileIDs(ids...)
}

// AddTagIDs adds the "tag" edge to the RequestTag entity by IDs.
func (ru *RequestUpdate) AddTagIDs(ids ...int) *RequestUpdate {
	ru.mutation.AddTagIDs(ids...)
	return ru
}

// AddTag adds the "tag" edges to the RequestTag entity.
func (ru *RequestUpdate) AddTag(r ...*RequestTag) *RequestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddTagIDs(ids...)
}

// AddTransactionDetailIDs adds the "transaction_detail" edge to the TransactionDetail entity by IDs.
func (ru *RequestUpdate) AddTransactionDetailIDs(ids ...int) *RequestUpdate {
	ru.mutation.AddTransactionDetailIDs(ids...)
	return ru
}

// AddTransactionDetail adds the "transaction_detail" edges to the TransactionDetail entity.
func (ru *RequestUpdate) AddTransactionDetail(t ...*TransactionDetail) *RequestUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.AddTransactionDetailIDs(ids...)
}

// AddCommentIDs adds the "comment" edge to the Comment entity by IDs.
func (ru *RequestUpdate) AddCommentIDs(ids ...int) *RequestUpdate {
	ru.mutation.AddCommentIDs(ids...)
	return ru
}

// AddComment adds the "comment" edges to the Comment entity.
func (ru *RequestUpdate) AddComment(c ...*Comment) *RequestUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddCommentIDs(ids...)
}

// Mutation returns the RequestMutation object of the builder.
func (ru *RequestUpdate) Mutation() *RequestMutation {
	return ru.mutation
}

// ClearStatus clears all "status" edges to the RequestStatus entity.
func (ru *RequestUpdate) ClearStatus() *RequestUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// RemoveStatuIDs removes the "status" edge to RequestStatus entities by IDs.
func (ru *RequestUpdate) RemoveStatuIDs(ids ...int) *RequestUpdate {
	ru.mutation.RemoveStatuIDs(ids...)
	return ru
}

// RemoveStatus removes "status" edges to RequestStatus entities.
func (ru *RequestUpdate) RemoveStatus(r ...*RequestStatus) *RequestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveStatuIDs(ids...)
}

// ClearTarget clears all "target" edges to the RequestTarget entity.
func (ru *RequestUpdate) ClearTarget() *RequestUpdate {
	ru.mutation.ClearTarget()
	return ru
}

// RemoveTargetIDs removes the "target" edge to RequestTarget entities by IDs.
func (ru *RequestUpdate) RemoveTargetIDs(ids ...int) *RequestUpdate {
	ru.mutation.RemoveTargetIDs(ids...)
	return ru
}

// RemoveTarget removes "target" edges to RequestTarget entities.
func (ru *RequestUpdate) RemoveTarget(r ...*RequestTarget) *RequestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveTargetIDs(ids...)
}

// ClearFile clears all "file" edges to the RequestFile entity.
func (ru *RequestUpdate) ClearFile() *RequestUpdate {
	ru.mutation.ClearFile()
	return ru
}

// RemoveFileIDs removes the "file" edge to RequestFile entities by IDs.
func (ru *RequestUpdate) RemoveFileIDs(ids ...int) *RequestUpdate {
	ru.mutation.RemoveFileIDs(ids...)
	return ru
}

// RemoveFile removes "file" edges to RequestFile entities.
func (ru *RequestUpdate) RemoveFile(r ...*RequestFile) *RequestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveFileIDs(ids...)
}

// ClearTag clears all "tag" edges to the RequestTag entity.
func (ru *RequestUpdate) ClearTag() *RequestUpdate {
	ru.mutation.ClearTag()
	return ru
}

// RemoveTagIDs removes the "tag" edge to RequestTag entities by IDs.
func (ru *RequestUpdate) RemoveTagIDs(ids ...int) *RequestUpdate {
	ru.mutation.RemoveTagIDs(ids...)
	return ru
}

// RemoveTag removes "tag" edges to RequestTag entities.
func (ru *RequestUpdate) RemoveTag(r ...*RequestTag) *RequestUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveTagIDs(ids...)
}

// ClearTransactionDetail clears all "transaction_detail" edges to the TransactionDetail entity.
func (ru *RequestUpdate) ClearTransactionDetail() *RequestUpdate {
	ru.mutation.ClearTransactionDetail()
	return ru
}

// RemoveTransactionDetailIDs removes the "transaction_detail" edge to TransactionDetail entities by IDs.
func (ru *RequestUpdate) RemoveTransactionDetailIDs(ids ...int) *RequestUpdate {
	ru.mutation.RemoveTransactionDetailIDs(ids...)
	return ru
}

// RemoveTransactionDetail removes "transaction_detail" edges to TransactionDetail entities.
func (ru *RequestUpdate) RemoveTransactionDetail(t ...*TransactionDetail) *RequestUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.RemoveTransactionDetailIDs(ids...)
}

// ClearComment clears all "comment" edges to the Comment entity.
func (ru *RequestUpdate) ClearComment() *RequestUpdate {
	ru.mutation.ClearComment()
	return ru
}

// RemoveCommentIDs removes the "comment" edge to Comment entities by IDs.
func (ru *RequestUpdate) RemoveCommentIDs(ids ...int) *RequestUpdate {
	ru.mutation.RemoveCommentIDs(ids...)
	return ru
}

// RemoveComment removes "comment" edges to Comment entities.
func (ru *RequestUpdate) RemoveComment(c ...*Comment) *RequestUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RequestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RequestUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RequestUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RequestUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   request.Table,
			Columns: request.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: request.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: request.FieldCreatedBy,
		})
	}
	if value, ok := ru.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: request.FieldAmount,
		})
	}
	if value, ok := ru.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: request.FieldAmount,
		})
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: request.FieldCreatedAt,
		})
	}
	if ru.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.StatusTable,
			Columns: []string{request.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requeststatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedStatusIDs(); len(nodes) > 0 && !ru.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.StatusTable,
			Columns: []string{request.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requeststatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.StatusTable,
			Columns: []string{request.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requeststatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TargetTable,
			Columns: []string{request.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttarget.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTargetIDs(); len(nodes) > 0 && !ru.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TargetTable,
			Columns: []string{request.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttarget.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TargetTable,
			Columns: []string{request.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttarget.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.FileTable,
			Columns: []string{request.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requestfile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedFileIDs(); len(nodes) > 0 && !ru.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.FileTable,
			Columns: []string{request.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requestfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.FileTable,
			Columns: []string{request.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requestfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TagTable,
			Columns: []string{request.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTagIDs(); len(nodes) > 0 && !ru.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TagTable,
			Columns: []string{request.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TagTable,
			Columns: []string{request.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TransactionDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TransactionDetailTable,
			Columns: []string{request.TransactionDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactiondetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTransactionDetailIDs(); len(nodes) > 0 && !ru.mutation.TransactionDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TransactionDetailTable,
			Columns: []string{request.TransactionDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactiondetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TransactionDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TransactionDetailTable,
			Columns: []string{request.TransactionDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactiondetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.CommentTable,
			Columns: []string{request.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedCommentIDs(); len(nodes) > 0 && !ru.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.CommentTable,
			Columns: []string{request.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.CommentTable,
			Columns: []string{request.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RequestUpdateOne is the builder for updating a single Request entity.
type RequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestMutation
}

// SetCreatedBy sets the "created_by" field.
func (ruo *RequestUpdateOne) SetCreatedBy(s string) *RequestUpdateOne {
	ruo.mutation.SetCreatedBy(s)
	return ruo
}

// SetAmount sets the "amount" field.
func (ruo *RequestUpdateOne) SetAmount(i int) *RequestUpdateOne {
	ruo.mutation.ResetAmount()
	ruo.mutation.SetAmount(i)
	return ruo
}

// AddAmount adds i to the "amount" field.
func (ruo *RequestUpdateOne) AddAmount(i int) *RequestUpdateOne {
	ruo.mutation.AddAmount(i)
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RequestUpdateOne) SetCreatedAt(t time.Time) *RequestUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableCreatedAt(t *time.Time) *RequestUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// AddStatuIDs adds the "status" edge to the RequestStatus entity by IDs.
func (ruo *RequestUpdateOne) AddStatuIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.AddStatuIDs(ids...)
	return ruo
}

// AddStatus adds the "status" edges to the RequestStatus entity.
func (ruo *RequestUpdateOne) AddStatus(r ...*RequestStatus) *RequestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddStatuIDs(ids...)
}

// AddTargetIDs adds the "target" edge to the RequestTarget entity by IDs.
func (ruo *RequestUpdateOne) AddTargetIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.AddTargetIDs(ids...)
	return ruo
}

// AddTarget adds the "target" edges to the RequestTarget entity.
func (ruo *RequestUpdateOne) AddTarget(r ...*RequestTarget) *RequestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddTargetIDs(ids...)
}

// AddFileIDs adds the "file" edge to the RequestFile entity by IDs.
func (ruo *RequestUpdateOne) AddFileIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.AddFileIDs(ids...)
	return ruo
}

// AddFile adds the "file" edges to the RequestFile entity.
func (ruo *RequestUpdateOne) AddFile(r ...*RequestFile) *RequestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddFileIDs(ids...)
}

// AddTagIDs adds the "tag" edge to the RequestTag entity by IDs.
func (ruo *RequestUpdateOne) AddTagIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.AddTagIDs(ids...)
	return ruo
}

// AddTag adds the "tag" edges to the RequestTag entity.
func (ruo *RequestUpdateOne) AddTag(r ...*RequestTag) *RequestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddTagIDs(ids...)
}

// AddTransactionDetailIDs adds the "transaction_detail" edge to the TransactionDetail entity by IDs.
func (ruo *RequestUpdateOne) AddTransactionDetailIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.AddTransactionDetailIDs(ids...)
	return ruo
}

// AddTransactionDetail adds the "transaction_detail" edges to the TransactionDetail entity.
func (ruo *RequestUpdateOne) AddTransactionDetail(t ...*TransactionDetail) *RequestUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.AddTransactionDetailIDs(ids...)
}

// AddCommentIDs adds the "comment" edge to the Comment entity by IDs.
func (ruo *RequestUpdateOne) AddCommentIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.AddCommentIDs(ids...)
	return ruo
}

// AddComment adds the "comment" edges to the Comment entity.
func (ruo *RequestUpdateOne) AddComment(c ...*Comment) *RequestUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddCommentIDs(ids...)
}

// Mutation returns the RequestMutation object of the builder.
func (ruo *RequestUpdateOne) Mutation() *RequestMutation {
	return ruo.mutation
}

// ClearStatus clears all "status" edges to the RequestStatus entity.
func (ruo *RequestUpdateOne) ClearStatus() *RequestUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// RemoveStatuIDs removes the "status" edge to RequestStatus entities by IDs.
func (ruo *RequestUpdateOne) RemoveStatuIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.RemoveStatuIDs(ids...)
	return ruo
}

// RemoveStatus removes "status" edges to RequestStatus entities.
func (ruo *RequestUpdateOne) RemoveStatus(r ...*RequestStatus) *RequestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveStatuIDs(ids...)
}

// ClearTarget clears all "target" edges to the RequestTarget entity.
func (ruo *RequestUpdateOne) ClearTarget() *RequestUpdateOne {
	ruo.mutation.ClearTarget()
	return ruo
}

// RemoveTargetIDs removes the "target" edge to RequestTarget entities by IDs.
func (ruo *RequestUpdateOne) RemoveTargetIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.RemoveTargetIDs(ids...)
	return ruo
}

// RemoveTarget removes "target" edges to RequestTarget entities.
func (ruo *RequestUpdateOne) RemoveTarget(r ...*RequestTarget) *RequestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveTargetIDs(ids...)
}

// ClearFile clears all "file" edges to the RequestFile entity.
func (ruo *RequestUpdateOne) ClearFile() *RequestUpdateOne {
	ruo.mutation.ClearFile()
	return ruo
}

// RemoveFileIDs removes the "file" edge to RequestFile entities by IDs.
func (ruo *RequestUpdateOne) RemoveFileIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.RemoveFileIDs(ids...)
	return ruo
}

// RemoveFile removes "file" edges to RequestFile entities.
func (ruo *RequestUpdateOne) RemoveFile(r ...*RequestFile) *RequestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveFileIDs(ids...)
}

// ClearTag clears all "tag" edges to the RequestTag entity.
func (ruo *RequestUpdateOne) ClearTag() *RequestUpdateOne {
	ruo.mutation.ClearTag()
	return ruo
}

// RemoveTagIDs removes the "tag" edge to RequestTag entities by IDs.
func (ruo *RequestUpdateOne) RemoveTagIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.RemoveTagIDs(ids...)
	return ruo
}

// RemoveTag removes "tag" edges to RequestTag entities.
func (ruo *RequestUpdateOne) RemoveTag(r ...*RequestTag) *RequestUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveTagIDs(ids...)
}

// ClearTransactionDetail clears all "transaction_detail" edges to the TransactionDetail entity.
func (ruo *RequestUpdateOne) ClearTransactionDetail() *RequestUpdateOne {
	ruo.mutation.ClearTransactionDetail()
	return ruo
}

// RemoveTransactionDetailIDs removes the "transaction_detail" edge to TransactionDetail entities by IDs.
func (ruo *RequestUpdateOne) RemoveTransactionDetailIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.RemoveTransactionDetailIDs(ids...)
	return ruo
}

// RemoveTransactionDetail removes "transaction_detail" edges to TransactionDetail entities.
func (ruo *RequestUpdateOne) RemoveTransactionDetail(t ...*TransactionDetail) *RequestUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.RemoveTransactionDetailIDs(ids...)
}

// ClearComment clears all "comment" edges to the Comment entity.
func (ruo *RequestUpdateOne) ClearComment() *RequestUpdateOne {
	ruo.mutation.ClearComment()
	return ruo
}

// RemoveCommentIDs removes the "comment" edge to Comment entities by IDs.
func (ruo *RequestUpdateOne) RemoveCommentIDs(ids ...int) *RequestUpdateOne {
	ruo.mutation.RemoveCommentIDs(ids...)
	return ruo
}

// RemoveComment removes "comment" edges to Comment entities.
func (ruo *RequestUpdateOne) RemoveComment(c ...*Comment) *RequestUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveCommentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RequestUpdateOne) Select(field string, fields ...string) *RequestUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Request entity.
func (ruo *RequestUpdateOne) Save(ctx context.Context) (*Request, error) {
	var (
		err  error
		node *Request
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RequestUpdateOne) SaveX(ctx context.Context) *Request {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RequestUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RequestUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RequestUpdateOne) sqlSave(ctx context.Context) (_node *Request, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   request.Table,
			Columns: request.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: request.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Request.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, request.FieldID)
		for _, f := range fields {
			if !request.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != request.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: request.FieldCreatedBy,
		})
	}
	if value, ok := ruo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: request.FieldAmount,
		})
	}
	if value, ok := ruo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: request.FieldAmount,
		})
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: request.FieldCreatedAt,
		})
	}
	if ruo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.StatusTable,
			Columns: []string{request.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requeststatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedStatusIDs(); len(nodes) > 0 && !ruo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.StatusTable,
			Columns: []string{request.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requeststatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.StatusTable,
			Columns: []string{request.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requeststatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TargetTable,
			Columns: []string{request.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttarget.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTargetIDs(); len(nodes) > 0 && !ruo.mutation.TargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TargetTable,
			Columns: []string{request.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttarget.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TargetTable,
			Columns: []string{request.TargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttarget.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.FileTable,
			Columns: []string{request.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requestfile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedFileIDs(); len(nodes) > 0 && !ruo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.FileTable,
			Columns: []string{request.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requestfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.FileTable,
			Columns: []string{request.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requestfile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TagTable,
			Columns: []string{request.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTagIDs(); len(nodes) > 0 && !ruo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TagTable,
			Columns: []string{request.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TagTable,
			Columns: []string{request.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: requesttag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TransactionDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TransactionDetailTable,
			Columns: []string{request.TransactionDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactiondetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTransactionDetailIDs(); len(nodes) > 0 && !ruo.mutation.TransactionDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TransactionDetailTable,
			Columns: []string{request.TransactionDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactiondetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TransactionDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.TransactionDetailTable,
			Columns: []string{request.TransactionDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transactiondetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.CommentTable,
			Columns: []string{request.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedCommentIDs(); len(nodes) > 0 && !ruo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.CommentTable,
			Columns: []string{request.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   request.CommentTable,
			Columns: []string{request.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Request{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
