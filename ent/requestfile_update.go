// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/traPtitech/Jomon/ent/file"
	"github.com/traPtitech/Jomon/ent/predicate"
	"github.com/traPtitech/Jomon/ent/request"
	"github.com/traPtitech/Jomon/ent/requestfile"
)

// RequestFileUpdate is the builder for updating RequestFile entities.
type RequestFileUpdate struct {
	config
	hooks    []Hook
	mutation *RequestFileMutation
}

// Where adds a new predicate for the RequestFileUpdate builder.
func (rfu *RequestFileUpdate) Where(ps ...predicate.RequestFile) *RequestFileUpdate {
	rfu.mutation.predicates = append(rfu.mutation.predicates, ps...)
	return rfu
}

// SetCreatedAt sets the "created_at" field.
func (rfu *RequestFileUpdate) SetCreatedAt(t time.Time) *RequestFileUpdate {
	rfu.mutation.SetCreatedAt(t)
	return rfu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rfu *RequestFileUpdate) SetNillableCreatedAt(t *time.Time) *RequestFileUpdate {
	if t != nil {
		rfu.SetCreatedAt(*t)
	}
	return rfu
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (rfu *RequestFileUpdate) SetRequestID(id int) *RequestFileUpdate {
	rfu.mutation.SetRequestID(id)
	return rfu
}

// SetRequest sets the "request" edge to the Request entity.
func (rfu *RequestFileUpdate) SetRequest(r *Request) *RequestFileUpdate {
	return rfu.SetRequestID(r.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (rfu *RequestFileUpdate) SetFileID(id int) *RequestFileUpdate {
	rfu.mutation.SetFileID(id)
	return rfu
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (rfu *RequestFileUpdate) SetNillableFileID(id *int) *RequestFileUpdate {
	if id != nil {
		rfu = rfu.SetFileID(*id)
	}
	return rfu
}

// SetFile sets the "file" edge to the File entity.
func (rfu *RequestFileUpdate) SetFile(f *File) *RequestFileUpdate {
	return rfu.SetFileID(f.ID)
}

// Mutation returns the RequestFileMutation object of the builder.
func (rfu *RequestFileUpdate) Mutation() *RequestFileMutation {
	return rfu.mutation
}

// ClearRequest clears the "request" edge to the Request entity.
func (rfu *RequestFileUpdate) ClearRequest() *RequestFileUpdate {
	rfu.mutation.ClearRequest()
	return rfu
}

// ClearFile clears the "file" edge to the File entity.
func (rfu *RequestFileUpdate) ClearFile() *RequestFileUpdate {
	rfu.mutation.ClearFile()
	return rfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rfu *RequestFileUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rfu.hooks) == 0 {
		if err = rfu.check(); err != nil {
			return 0, err
		}
		affected, err = rfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfu.check(); err != nil {
				return 0, err
			}
			rfu.mutation = mutation
			affected, err = rfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rfu.hooks) - 1; i >= 0; i-- {
			mut = rfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rfu *RequestFileUpdate) SaveX(ctx context.Context) int {
	affected, err := rfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rfu *RequestFileUpdate) Exec(ctx context.Context) error {
	_, err := rfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfu *RequestFileUpdate) ExecX(ctx context.Context) {
	if err := rfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rfu *RequestFileUpdate) check() error {
	if _, ok := rfu.mutation.RequestID(); rfu.mutation.RequestCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"request\"")
	}
	return nil
}

func (rfu *RequestFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requestfile.Table,
			Columns: requestfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requestfile.FieldID,
			},
		},
	}
	if ps := rfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: requestfile.FieldCreatedAt,
		})
	}
	if rfu.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestfile.RequestTable,
			Columns: []string{requestfile.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: request.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfu.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestfile.RequestTable,
			Columns: []string{requestfile.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: request.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rfu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   requestfile.FileTable,
			Columns: []string{requestfile.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   requestfile.FileTable,
			Columns: []string{requestfile.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestfile.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RequestFileUpdateOne is the builder for updating a single RequestFile entity.
type RequestFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestFileMutation
}

// SetCreatedAt sets the "created_at" field.
func (rfuo *RequestFileUpdateOne) SetCreatedAt(t time.Time) *RequestFileUpdateOne {
	rfuo.mutation.SetCreatedAt(t)
	return rfuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rfuo *RequestFileUpdateOne) SetNillableCreatedAt(t *time.Time) *RequestFileUpdateOne {
	if t != nil {
		rfuo.SetCreatedAt(*t)
	}
	return rfuo
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (rfuo *RequestFileUpdateOne) SetRequestID(id int) *RequestFileUpdateOne {
	rfuo.mutation.SetRequestID(id)
	return rfuo
}

// SetRequest sets the "request" edge to the Request entity.
func (rfuo *RequestFileUpdateOne) SetRequest(r *Request) *RequestFileUpdateOne {
	return rfuo.SetRequestID(r.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (rfuo *RequestFileUpdateOne) SetFileID(id int) *RequestFileUpdateOne {
	rfuo.mutation.SetFileID(id)
	return rfuo
}

// SetNillableFileID sets the "file" edge to the File entity by ID if the given value is not nil.
func (rfuo *RequestFileUpdateOne) SetNillableFileID(id *int) *RequestFileUpdateOne {
	if id != nil {
		rfuo = rfuo.SetFileID(*id)
	}
	return rfuo
}

// SetFile sets the "file" edge to the File entity.
func (rfuo *RequestFileUpdateOne) SetFile(f *File) *RequestFileUpdateOne {
	return rfuo.SetFileID(f.ID)
}

// Mutation returns the RequestFileMutation object of the builder.
func (rfuo *RequestFileUpdateOne) Mutation() *RequestFileMutation {
	return rfuo.mutation
}

// ClearRequest clears the "request" edge to the Request entity.
func (rfuo *RequestFileUpdateOne) ClearRequest() *RequestFileUpdateOne {
	rfuo.mutation.ClearRequest()
	return rfuo
}

// ClearFile clears the "file" edge to the File entity.
func (rfuo *RequestFileUpdateOne) ClearFile() *RequestFileUpdateOne {
	rfuo.mutation.ClearFile()
	return rfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rfuo *RequestFileUpdateOne) Select(field string, fields ...string) *RequestFileUpdateOne {
	rfuo.fields = append([]string{field}, fields...)
	return rfuo
}

// Save executes the query and returns the updated RequestFile entity.
func (rfuo *RequestFileUpdateOne) Save(ctx context.Context) (*RequestFile, error) {
	var (
		err  error
		node *RequestFile
	)
	if len(rfuo.hooks) == 0 {
		if err = rfuo.check(); err != nil {
			return nil, err
		}
		node, err = rfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequestFileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfuo.check(); err != nil {
				return nil, err
			}
			rfuo.mutation = mutation
			node, err = rfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rfuo.hooks) - 1; i >= 0; i-- {
			mut = rfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rfuo *RequestFileUpdateOne) SaveX(ctx context.Context) *RequestFile {
	node, err := rfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rfuo *RequestFileUpdateOne) Exec(ctx context.Context) error {
	_, err := rfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfuo *RequestFileUpdateOne) ExecX(ctx context.Context) {
	if err := rfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rfuo *RequestFileUpdateOne) check() error {
	if _, ok := rfuo.mutation.RequestID(); rfuo.mutation.RequestCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"request\"")
	}
	return nil
}

func (rfuo *RequestFileUpdateOne) sqlSave(ctx context.Context) (_node *RequestFile, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requestfile.Table,
			Columns: requestfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requestfile.FieldID,
			},
		},
	}
	id, ok := rfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RequestFile.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requestfile.FieldID)
		for _, f := range fields {
			if !requestfile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != requestfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: requestfile.FieldCreatedAt,
		})
	}
	if rfuo.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestfile.RequestTable,
			Columns: []string{requestfile.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: request.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfuo.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestfile.RequestTable,
			Columns: []string{requestfile.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: request.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rfuo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   requestfile.FileTable,
			Columns: []string{requestfile.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfuo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   requestfile.FileTable,
			Columns: []string{requestfile.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: file.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RequestFile{config: rfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestfile.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
