openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: "/api"
info:
  version: "2.0.0"
  title: Jomon API
  description: >-
    JomonのAPIです。
paths:
  "/auth/genpkce":
    get:
      description: PKCEを取得する｡
      tags:
        - Auth
      responses:
        "200":
          description: 取得できた｡
          content:
            application/json:
              schema:
                type: object
                properties:
                  code_challenge:
                    type: string
                  code_challenge_method:
                    type: string
                  client_id:
                    type: string
                  response_type:
                    type: string
  "/transactions":
    get:
      description: トランザクション一覧を取得する。
      tags:
        - Transactions
      parameters:
        - name: sort
          description: 並び順 (作成日時が新しい "created_at", 作成日時が古い "-created_at")
          required: false
          in: query
          schema:
            type: string
        - name: target
          description: 入金元、あるいは出金先
          required: false
          in: query
          schema:
            type: string
        - name: since
          description: いつからのトランザクションか
          required: false
          in: query
          schema:
            type: string
            format: date
        - name: until
          description: いつまでのトランザクションか
          required: false
          in: query
          schema:
            type: string
            format: date
        - name: tag
          description: タグ(複数の場合カンマ区切り)
          required: false
          in: query
          schema:
            type: string
        - name: group
          description: グループ
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: 該当するものがない場合は空配列を返却。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "400":
          description: 不正なリクエスト。
    post:
      description: トランザクションを新規作成する。
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTransaction"
      responses:
        "201":
          description: 作成に成功。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionDetail"

        "400":
          description: リクエストに形式上または内容の不備がある。例えばtargetが空欄であるなど。内容に不備がある場合には、不備があるkeyを配列にして返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "amount"
  "/transactions/{transactionID}":
    parameters:
      - name: transactionID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      description: 指定したトランザクションの詳細を取得する。
      tags:
        - Transactions
      responses:
        "200":
          description: あったら返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionDetail"
        "404":
          description: 指定されたTransactionはない。
    put:
      description: 指定したTransactionを修正する。
      tags:
        - Transactions
        - Admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTransaction"
      responses:
        "200":
          description: 修正できた。返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionDetail"
        "400":
          description: リクエストに形式上または内容の不備がある。例えばtargetが空欄であるなど。内容に不備がある場合には、不備があるkeyを配列にして返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "amount"
        "403":
          description: 編集権限がない人による操作。
        "404":
          description: 指定されたトランザクションはない。
  "/requests":
    get:
      description: 依頼一覧を取得する。
      tags:
        - Requests
      parameters:
        - name: sort
          description: 並び順 (作成日時が新しい "created_at", 作成日時が古い "-created_at", タイトルの昇順 "title", タイトルの降順 "-title")
          required: false
          in: query
          schema:
            type: string
        - name: target
          description: 誰との取引か
          required: false
          in: query
          schema:
            type: string
        - name: year
          description: 何年度の依頼か
          required: false
          in: query
          schema:
            type: integer
        - name: since
          description: いつからの依頼か
          required: false
          in: query
          schema:
            type: string
            format: date
        - name: until
          description: いつまでの依頼か
          required: false
          in: query
          schema:
            type: string
            format: date
        - name: tag
          description: タグ(複数の場合カンマ区切り)
          required: false
          in: query
          schema:
            type: string
        - name: group
          description: グループ
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: 取得できた。返す。該当するものがなくても空配列を返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Request"
        "400":
          description: 不正なリクエスト。
    post:
      description: 依頼を新規作成する。
      tags:
        - Requests
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      responses:
        "201":
          description: 作成した。結果を返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDetail"

        "400":
          description: リクエストに形式上または内容の不備がある。例えばtitleが空欄であるなど。内容に不備がある場合には、不備があるkeyを配列にして返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "amount"
  "/requests/{requestID}":
    parameters:
      - name: requestID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      description: 指定したトランザクションの詳細を取得する。
      tags:
        - Requests
      responses:
        "200":
          description: あったら返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDetail"
        "404":
          description: 指定された依頼はない。
    put:
      description: 指定した依頼を修正する。
      tags:
        - Requests
        - Authors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      responses:
        "200":
          description: 修正できた。返す。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDetail"
        "400":
          description: リクエストに形式上または内容の不備がある。例えばtitleが空欄であるなど。内容に不備がある場合には、不備があるkeyを配列にして返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "amount"
        "403":
          description: 編集権限がない人による操作。
        "404":
          description: 指定された依頼はない。
  "/requests/{requestID}/comments":
    post:
      description: 指定した依頼にコメントを新規作成する。
      tags:
        - Comments
      parameters:
        - name: requestID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "ここを修正してください。"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: リクエストに形式上または内容の不備がある。例えばコメント欄が空欄。
        "404":
          description: 指定された依頼はない。
  "/requests/{requestID}/comments/{commentID}":
    parameters:
      - name: requestID
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: commentID
        in: path
        required: true
        schema:
          type: integer
    put:
      description: コメントを変更する。
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "ここを修正してください。"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: リクエストに形式上または内容の不備がある。例えばコメント欄が空欄。
        "403":
          description: 編集権限がない人(コメント作成者以外)による操作。
        "404":
          description: 指定された申請書はない。
    delete:
      description: 指定したコメントを削除する。
      tags:
        - Comments
      responses:
        "204":
          description: 正常に取り消すことができました。
        "403":
          description: 編集権限がない人(コメント作成者以外)による操作。
        "404":
          description: 指定されたコメントはない。
  "/requests/{requestID}/status":
    put:
      description: 指定した申請書のstatusを変更のみ(新規はpost /requests)する。reasonは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。
      tags:
        - Status
        - Admins
        - Authors
      parameters:
        - name: requestID
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: "#/components/schemas/StatusEnum"
                reason:
                  type: string
                  example: "良いですね。"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "400":
          description: リクエストに形式上または内容の不備がある。または行き来できないstatus。
        "404":
          description: 指定された依頼はない。
  "/admins":
    get:
      description: adminユーザーの一覧を返す。
      tags:
        - Admins
      responses:
        "200":
          description: 取得に成功した。返す
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrapID"
    post:
      description: adminユーザーを追加する。
      tags:
        - Admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trap_id:
                  $ref: "#/components/schemas/TrapID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrapID"
        "400":
          description: リクエストに形式上の不備がある。
        "403":
          description: adminではない人による操作。
        "404":
          description: adminを追加しようとした対象者は存在しない
    delete:
      description: adminユーザーを削除する。
      tags:
        - Admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                trap_id:
                  $ref: "#/components/schemas/TrapID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrapID"
        "400":
          description: リクエストに形式上の不備がある。
        "403":
          description: admin以外の人
        "404":
          description: adminを削除しようとした対象者は存在しない
  "/tags":
    get:
      description: タグの一覧を返す。
      tags:
        - Tags
      responses:
        "200":
          description: 取得に成功した。返す
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
    post:
      description: タグを追加する。
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTag"
      responses:
        "200":
          description: 追加に成功した。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
  "/tags/{tagID}":
    parameters:
      - name: tagID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      description: 指定したタグが付与されている依頼、トランザクションを返す。
      tags:
        - Transactions
        - Requests
      responses:
        "200":
          description: 取得に成功した。返す
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Tag"
                  - type: object
                    properties:
                      transactions:
                        type: array
                        items:
                          type: string
                          format: uuid
                      requests:
                        type: array
                        items:
                          type: string
                          format: uuid
        "404":
          description: Not Found
    put:
      description: タグの情報を変更する。
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTag"
      responses:
        "200":
          description: 変更に成功した。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Tag"
                  - type: object
                    properties:
                      transactions:
                        type: array
                        items:
                          type: string
                          format: uuid
                      requests:
                        type: array
                        items:
                          type: string
                          format: uuid
        "404":
          description: Not Found
    delete:
      description: タグを削除する
      tags:
        - Tags
      responses:
        "200":
          description: 削除に成功した。
        "404":
          description: Not Found
  "/groups":
    get:
      description: グループの一覧を返す。
      tags:
        - Groups
      responses:
        "200":
          description: 取得に成功した。返す
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
    post:
      description: グループを追加する。
      tags:
        - Groups
        - Admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostGroup"
      responses:
        "200":
          description: 追加に成功した。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  "/groups/{groupID}":
    parameters:
      - name: groupID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      description: 指定したグループが付与されている依頼、トランザクションを返す。
      tags:
        - Groups
      responses:
        "200":
          description: 取得に成功した。返す
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Group"
                  - type: object
                    properties:
                      transactions:
                        type: array
                        items:
                          type: string
                          format: uuid
                      requests:
                        type: array
                        items:
                          type: string
                          format: uuid
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/TrapID"
        "404":
          description: Not Found
    post:
      description: ユーザーをグループに追加する。
      tags:
        - Groups
        - Admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrapID"
      responses:
        "200":
          description: 追加に成功した。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Group"
                  - type: object
                    properties:
                      transactions:
                        type: array
                        items:
                          type: string
                          format: uuid
                      requests:
                        type: array
                        items:
                          type: string
                          format: uuid
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/TrapID"
    put:
      description: グループの情報を変更する。
      tags:
        - Groups
        - Admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostGroup"
      responses:
        "200":
          description: 変更に成功した。
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Group"
                  - type: object
                    properties:
                      transactions:
                        type: array
                        items:
                          type: string
                          format: uuid
                      requests:
                        type: array
                        items:
                          type: string
                          format: uuid
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/TrapID"
        "404":
          description: Not Found
    delete:
      description: グループを削除する
      tags:
        - Groups
        - Admins
      responses:
        "200":
          description: 削除に成功した。
        "404":
          description: Not Found
  "/files":
    post:
      description: ファイルをアップロードする。
      tags:
        - Files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  $ref: "#/components/schemas/File"
                name:
                  type: string
                  example: "hoge.png"
      responses:
        "200":
          description: 変更に成功した。
          content:
            application/json:
              schema:
                type: string
                format: uuid
        "404":
          description: Not Found
  "/files/{fileID}":
    parameters:
      - name: fileID
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Files
      description: 指定されたファイルを返す
      responses:
        "200":
          description: 該当するファイルが存在した 返す
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    $ref: "#/components/schemas/File"
                  name:
                    format: string
                    example: "hoge.png"
        "404":
          description: Not Found
    delete:
      description: 指定したidのファイルを削除する。
      tags:
        - Files
        - Admins
        - Authors
      responses:
        "204":
          description: 正常に取り消すことができた。
        "403":
          description: 編集権限がない人(作成者、admin以外)による操作。
        "404":
          description: 該当する画像はない。

components:
  schemas:
    StatusEnum:
      type: string
      enum: [submitted, fix_required, accepted, fully_repaid, rejected]
    TrapID:
      type: string
      pattern: "^[0-9a-zA-Z_]{1,32}$"
      example: "nagatech"
    Tag:
      allOf:
        - $ref: "#/components/schemas/PostTag"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    PostTag:
      type: object
      properties:
        name:
          type: string
          example: "2020講習会"
        description:
          type: string
          example: "2020年度講習会"
    Group:
      allOf:
        - $ref: "#/components/schemas/PostGroup"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    PostGroup:
      type: object
      properties:
        name:
          type: string
          example: "SysAd"
        description:
          type: string
          example: "SysAd班"
        budget:
          type: integer
          example: 250000
    File:
      type: string
      format: binary
    Target:
      type: string
      example: "hoge株式会社"
    Request:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [submitted, fix_required, accepted, fully_repaid, rejected]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/TrapID"
        amount:
          type: integer
          example: 1200
        title:
          type: string
          example: "SysAd講習会の開催費用"
        content:
          type: string
          example: "サーバー代 1200円"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        group:
          $ref: "#/components/schemas/Group"
    RequestDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
        statuses:
          type: array
          items:
            $ref: "#/components/schemas/Status"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        group:
          $ref: "#/components/schemas/Group"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Transaction:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
        - $ref: "#/components/schemas/PostTransaction"
    TransactionDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: integer
          example: 1200
        target:
          $ref: "#/components/schemas/Target"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        group:
          $ref: "#/components/schemas/Group"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PostTransaction:
      type: object
      properties:
        amount:
          type: integer
          example: 1200
        target:
          $ref: "#/components/schemas/Target"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/PostTag"
        group:
          $ref: "#/components/schemas/PostGroup"
    PostRequest:
      type: object
      properties:
        created_by:
          $ref: "#/components/schemas/TrapID"
        amount:
          type: integer
          example: 1200
        title:
          type: string
          example: "SysAd講習会の開催費用"
        content:
          type: string
          example: "サーバー代 1200円"
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/PostTag"
        group:
          $ref: "#/components/schemas/PostGroup"
    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          $ref: "#/components/schemas/TrapID"
        comment:
          type: string
          example: "コメント内容"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Status:
      type: object
      properties:
        created_by:
          $ref: "#/components/schemas/TrapID"
        status:
          $ref: "#/components/schemas/StatusEnum"
        reason:
          type: string
          default: null
          example: "これは雑すぎますね。"
        created_at:
          type: string
          format: date-time
